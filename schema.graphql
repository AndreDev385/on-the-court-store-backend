type Query {
  billById(_id: MongoID!): Bill
  billsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsBillInput): [Bill!]!
  bill(
    """Filter by fields"""
    filter: FilterFindOneBillInput
    skip: Int
    sort: SortFindOneBillInput
  ): Bill
  bills(
    """Filter by fields"""
    filter: FilterFindManyBillInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyBillInput
  ): [Bill!]!
  billCount(
    """Filter by fields"""
    filter: FilterCountBillInput
  ): Int
  billConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyBillInput

    """Sort argument for data ordering"""
    sort: SortConnectionBillEnum = _ID_DESC
  ): BillConnection
  billPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyBillInput
    sort: SortFindManyBillInput
  ): BillPagination
  brandById(_id: MongoID!): Brand
  brandsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsBrandInput): [Brand!]!
  brand(
    """Filter by fields"""
    filter: FilterFindOneBrandInput
    skip: Int
    sort: SortFindOneBrandInput
  ): Brand
  brands(
    """Filter by fields"""
    filter: FilterFindManyBrandInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyBrandInput
  ): [Brand!]!
  brandCount(
    """Filter by fields"""
    filter: FilterCountBrandInput
  ): Int
  brandConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyBrandInput

    """Sort argument for data ordering"""
    sort: SortConnectionBrandEnum = _ID_DESC
  ): BrandConnection
  brandPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyBrandInput
    sort: SortFindManyBrandInput
  ): BrandPagination
  categoryById(_id: MongoID!): Category
  categoriesById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCategoryInput): [Category!]!
  category(
    """Filter by fields"""
    filter: FilterFindOneCategoryInput
    skip: Int
    sort: SortFindOneCategoryInput
  ): Category
  categories(
    """Filter by fields"""
    filter: FilterFindManyCategoryInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCategoryInput
  ): [Category!]!
  categoryCount(
    """Filter by fields"""
    filter: FilterCountCategoryInput
  ): Int
  categoryConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyCategoryInput

    """Sort argument for data ordering"""
    sort: SortConnectionCategoryEnum = _ID_DESC
  ): CategoryConnection
  categoryPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCategoryInput
    sort: SortFindManyCategoryInput
  ): CategoryPagination
  clientById(_id: MongoID!): Client
  clientsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsClientInput): [Client!]!
  client(
    """Filter by fields"""
    filter: FilterFindOneClientInput
    skip: Int
    sort: SortFindOneClientInput
  ): Client
  clients(
    """Filter by fields"""
    filter: FilterFindManyClientInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyClientInput
  ): [Client!]!
  clientCount(
    """Filter by fields"""
    filter: FilterCountClientInput
  ): Int
  clientConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyClientInput

    """Sort argument for data ordering"""
    sort: SortConnectionClientEnum = _ID_DESC
  ): ClientConnection
  clientPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyClientInput
    sort: SortFindManyClientInput
  ): ClientPagination
  creditById(_id: MongoID!): Credit
  creditsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCreditInput): [Credit!]!
  credit(
    """Filter by fields"""
    filter: FilterFindOneCreditInput
    skip: Int
    sort: SortFindOneCreditInput
  ): Credit
  credits(
    """Filter by fields"""
    filter: FilterFindManyCreditInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCreditInput
  ): [Credit!]!
  creditCount(
    """Filter by fields"""
    filter: FilterCountCreditInput
  ): Int
  creditConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyCreditInput

    """Sort argument for data ordering"""
    sort: SortConnectionCreditEnum = _ID_DESC
  ): CreditConnection
  creditPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCreditInput
    sort: SortFindManyCreditInput
  ): CreditPagination
  creditNoteById(_id: MongoID!): CreditNote
  creditNotesById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCreditNoteInput): [CreditNote!]!
  creditNote(
    """Filter by fields"""
    filter: FilterFindOneCreditNoteInput
    skip: Int
    sort: SortFindOneCreditNoteInput
  ): CreditNote
  creditNotes(
    """Filter by fields"""
    filter: FilterFindManyCreditNoteInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCreditNoteInput
  ): [CreditNote!]!
  creditNoteCount(
    """Filter by fields"""
    filter: FilterCountCreditNoteInput
  ): Int
  creditNoteConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyCreditNoteInput

    """Sort argument for data ordering"""
    sort: SortConnectionCreditNoteEnum = _ID_DESC
  ): CreditNoteConnection
  creditNotePagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCreditNoteInput
    sort: SortFindManyCreditNoteInput
  ): CreditNotePagination
  currencyById(_id: MongoID!): Currency
  currenciesById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCurrencyInput): [Currency!]!
  currency(
    """Filter by fields"""
    filter: FilterFindOneCurrencyInput
    skip: Int
    sort: SortFindOneCurrencyInput
  ): Currency
  currencies(
    """Filter by fields"""
    filter: FilterFindManyCurrencyInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCurrencyInput
  ): [Currency!]!
  currencyCount(
    """Filter by fields"""
    filter: FilterCountCurrencyInput
  ): Int
  currencyConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyCurrencyInput

    """Sort argument for data ordering"""
    sort: SortConnectionCurrencyEnum = _ID_DESC
  ): CurrencyConnection
  currencyPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCurrencyInput
    sort: SortFindManyCurrencyInput
  ): CurrencyPagination
  deliveryNoteById(_id: MongoID!): DeliveryNote
  deliveryNotesById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsDeliveryNoteInput): [DeliveryNote!]!
  deliveryNote(
    """Filter by fields"""
    filter: FilterFindOneDeliveryNoteInput
    skip: Int
    sort: SortFindOneDeliveryNoteInput
  ): DeliveryNote
  deliveryNotes(
    """Filter by fields"""
    filter: FilterFindManyDeliveryNoteInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyDeliveryNoteInput
  ): [DeliveryNote!]!
  deliveryNoteCount(
    """Filter by fields"""
    filter: FilterCountDeliveryNoteInput
  ): Int
  deliveryNoteConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyDeliveryNoteInput

    """Sort argument for data ordering"""
    sort: SortConnectionDeliveryNoteEnum = _ID_DESC
  ): DeliveryNoteConnection
  deliveryNotePagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyDeliveryNoteInput
    sort: SortFindManyDeliveryNoteInput
  ): DeliveryNotePagination
  locationById(_id: MongoID!): Location
  locationsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsLocationInput): [Location!]!
  location(
    """Filter by fields"""
    filter: FilterFindOneLocationInput
    skip: Int
    sort: SortFindOneLocationInput
  ): Location
  locations(
    """Filter by fields"""
    filter: FilterFindManyLocationInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyLocationInput
  ): [Location!]!
  locationCount(
    """Filter by fields"""
    filter: FilterCountLocationInput
  ): Int
  locationConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyLocationInput

    """Sort argument for data ordering"""
    sort: SortConnectionLocationEnum = _ID_DESC
  ): LocationConnection
  locationPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyLocationInput
    sort: SortFindManyLocationInput
  ): LocationPagination
  modelById(_id: MongoID!): Model
  modelsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsModelInput): [Model!]!
  model(
    """Filter by fields"""
    filter: FilterFindOneModelInput
    skip: Int
    sort: SortFindOneModelInput
  ): Model
  models(
    """Filter by fields"""
    filter: FilterFindManyModelInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyModelInput
  ): [Model!]!
  modelCount(
    """Filter by fields"""
    filter: FilterCountModelInput
  ): Int
  modelConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyModelInput

    """Sort argument for data ordering"""
    sort: SortConnectionModelEnum = _ID_DESC
  ): ModelConnection
  modelPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyModelInput
    sort: SortFindManyModelInput
  ): ModelPagination
  orderById(_id: MongoID!): Order
  ordersById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsOrderInput): [Order!]!
  order(
    """Filter by fields"""
    filter: FilterFindOneOrderInput
    skip: Int
    sort: SortFindOneOrderInput
  ): Order
  orders(
    """Filter by fields"""
    filter: FilterFindManyOrderInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyOrderInput
  ): [Order!]!
  orderCount(
    """Filter by fields"""
    filter: FilterCountOrderInput
  ): Int
  orderConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyOrderInput

    """Sort argument for data ordering"""
    sort: SortConnectionOrderEnum = _ID_DESC
  ): OrderConnection
  orderPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyOrderInput
    sort: SortFindManyOrderInput
  ): OrderPagination
  orderProductById(_id: MongoID!): OrderProduct
  orderProductsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsOrderProductInput): [OrderProduct!]!
  orderProduct(
    """Filter by fields"""
    filter: FilterFindOneOrderProductInput
    skip: Int
    sort: SortFindOneOrderProductInput
  ): OrderProduct
  orderProducts(
    """Filter by fields"""
    filter: FilterFindManyOrderProductInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyOrderProductInput
  ): [OrderProduct!]!
  orderProductCount(
    """Filter by fields"""
    filter: FilterCountOrderProductInput
  ): Int
  orderProductConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyOrderProductInput

    """Sort argument for data ordering"""
    sort: SortConnectionOrderProductEnum = _ID_DESC
  ): OrderProductConnection
  orderProductPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyOrderProductInput
    sort: SortFindManyOrderProductInput
  ): OrderProductPagination
  productById(_id: MongoID!): Product
  productsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProductInput): [Product!]!
  product(
    """Filter by fields"""
    filter: FilterFindOneProductInput
    skip: Int
    sort: SortFindOneProductInput
  ): Product
  products(
    """Filter by fields"""
    filter: FilterFindManyProductInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyProductInput
  ): [Product!]!
  productCount(
    """Filter by fields"""
    filter: FilterCountProductInput
  ): Int
  productConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyProductInput

    """Sort argument for data ordering"""
    sort: SortConnectionProductEnum = _ID_DESC
  ): ProductConnection
  productPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyProductInput
    sort: SortFindManyProductInput
  ): ProductPagination
  promoCodeById(_id: MongoID!): PromoCode
  promoCodesById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsPromoCodeInput): [PromoCode!]!
  promoCode(
    """Filter by fields"""
    filter: FilterFindOnePromoCodeInput
    skip: Int
    sort: SortFindOnePromoCodeInput
  ): PromoCode
  promoCodes(
    """Filter by fields"""
    filter: FilterFindManyPromoCodeInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyPromoCodeInput
  ): [PromoCode!]!
  promoCodeCount(
    """Filter by fields"""
    filter: FilterCountPromoCodeInput
  ): Int
  promoCodeConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPromoCodeInput

    """Sort argument for data ordering"""
    sort: SortConnectionPromoCodeEnum = _ID_DESC
  ): PromoCodeConnection
  promoCodePagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyPromoCodeInput
    sort: SortFindManyPromoCodeInput
  ): PromoCodePagination
  settingById(_id: MongoID!): Setting
  settingsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsSettingInput): [Setting!]!
  setting(
    """Filter by fields"""
    filter: FilterFindOneSettingInput
    skip: Int
    sort: SortFindOneSettingInput
  ): Setting
  settings(
    """Filter by fields"""
    filter: FilterFindManySettingInput
    skip: Int
    limit: Int = 100
    sort: SortFindManySettingInput
  ): [Setting!]!
  settingCount(
    """Filter by fields"""
    filter: FilterCountSettingInput
  ): Int
  settingConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManySettingInput

    """Sort argument for data ordering"""
    sort: SortConnectionSettingEnum = _ID_DESC
  ): SettingConnection
  settingPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManySettingInput
    sort: SortFindManySettingInput
  ): SettingPagination
  shippingById(_id: MongoID!): Shipping
  shippingsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsShippingInput): [Shipping!]!
  shipping(
    """Filter by fields"""
    filter: FilterFindOneShippingInput
    skip: Int
    sort: SortFindOneShippingInput
  ): Shipping
  shippings(
    """Filter by fields"""
    filter: FilterFindManyShippingInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyShippingInput
  ): [Shipping!]!
  shippingCount(
    """Filter by fields"""
    filter: FilterCountShippingInput
  ): Int
  shippingConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyShippingInput

    """Sort argument for data ordering"""
    sort: SortConnectionShippingEnum = _ID_DESC
  ): ShippingConnection
  shippingPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyShippingInput
    sort: SortFindManyShippingInput
  ): ShippingPagination
  shopCartById(_id: MongoID!): ShopCart
  shopCartsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsShopCartInput): [ShopCart!]!
  shopCart(
    """Filter by fields"""
    filter: FilterFindOneShopCartInput
    skip: Int
    sort: SortFindOneShopCartInput
  ): ShopCart
  shopCarts(
    """Filter by fields"""
    filter: FilterFindManyShopCartInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyShopCartInput
  ): [ShopCart!]!
  shopCartCount(
    """Filter by fields"""
    filter: FilterCountShopCartInput
  ): Int
  shopCartConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyShopCartInput

    """Sort argument for data ordering"""
    sort: SortConnectionShopCartEnum = _ID_DESC
  ): ShopCartConnection
  shopCartPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyShopCartInput
    sort: SortFindManyShopCartInput
  ): ShopCartPagination
  supplierById(_id: MongoID!): Supplier
  suppliersById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsSupplierInput): [Supplier!]!
  supplier(
    """Filter by fields"""
    filter: FilterFindOneSupplierInput
    skip: Int
    sort: SortFindOneSupplierInput
  ): Supplier
  suppliers(
    """Filter by fields"""
    filter: FilterFindManySupplierInput
    skip: Int
    limit: Int = 100
    sort: SortFindManySupplierInput
  ): [Supplier!]!
  supplierCount(
    """Filter by fields"""
    filter: FilterCountSupplierInput
  ): Int
  supplierConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManySupplierInput

    """Sort argument for data ordering"""
    sort: SortConnectionSupplierEnum = _ID_DESC
  ): SupplierConnection
  supplierPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManySupplierInput
    sort: SortFindManySupplierInput
  ): SupplierPagination
  userById(_id: MongoID!): User
  usersById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsUserInput): [User!]!
  user(
    """Filter by fields"""
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  users(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyUserInput
  ): [User!]!
  userCount(
    """Filter by fields"""
    filter: FilterCountUserInput
  ): Int
  userConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyUserInput

    """Sort argument for data ordering"""
    sort: SortConnectionUserEnum = _ID_DESC
  ): UserConnection
  userPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyUserInput
    sort: SortFindManyUserInput
  ): UserPagination
  variantById(_id: MongoID!): Variant
  variantsById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsVariantInput): [Variant!]!
  variant(
    """Filter by fields"""
    filter: FilterFindOneVariantInput
    skip: Int
    sort: SortFindOneVariantInput
  ): Variant
  variants(
    """Filter by fields"""
    filter: FilterFindManyVariantInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyVariantInput
  ): [Variant!]!
  variantCount(
    """Filter by fields"""
    filter: FilterCountVariantInput
  ): Int
  variantConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyVariantInput

    """Sort argument for data ordering"""
    sort: SortConnectionVariantEnum = _ID_DESC
  ): VariantConnection
  variantPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyVariantInput
    sort: SortFindManyVariantInput
  ): VariantPagination
  variantValueById(_id: MongoID!): VariantValue
  variantValuesById(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsVariantValueInput): [VariantValue!]!
  variantValue(
    """Filter by fields"""
    filter: FilterFindOneVariantValueInput
    skip: Int
    sort: SortFindOneVariantValueInput
  ): VariantValue
  variantValues(
    """Filter by fields"""
    filter: FilterFindManyVariantValueInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyVariantValueInput
  ): [VariantValue!]!
  variantValueCount(
    """Filter by fields"""
    filter: FilterCountVariantValueInput
  ): Int
  variantValueConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyVariantValueInput

    """Sort argument for data ordering"""
    sort: SortConnectionVariantValueEnum = _ID_DESC
  ): VariantValueConnection
  variantValuePagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyVariantValueInput
    sort: SortFindManyVariantValueInput
  ): VariantValuePagination

  """Get the logged in user"""
  me: User

  """Search products by category"""
  searchByCategory(categorySlug: String!): [Product]

  """Search products by Brand"""
  searchByBrand(brandSlug: String!): [Product]

  """Search products by name, description, extra info name or value"""
  searchProduct(searchString: String!): [Product]

  """..."""
  searchCategoriesByCategory(data: SearchCategoriesByCategoryInput): SearchCategoriesByCategoryType

  """Search products by name, description, extra info name or value"""
  searchProductByCategories(data: SearchProductByCategoriesInput): [Product]

  """Search products based on brands and category slug"""
  productByBrandsCategoriesPagination(data: ProductByBrandsCategoriesPaginationInput): ProductPaginationByCategoriesInfo

  """Search products by name, description, extra info name or value"""
  searchProductByCategoriesPagination(data: SearchProductByCategoriesPaginationInput): ProductPaginationByCategoriesInfo

  """..."""
  filterProductsByPricePagination(data: FilterProductsByPricePaginationInput): ProductPaginationByCategoriesInfo

  """..."""
  filterProductsByCategoryPricePagination(data: FilterProductsByCategoryPriceInput): ProductPaginationByCategoriesInfo

  """..."""
  searchProductPagination(data: SearchProductPaginationInput): ProductPaginationByCategoriesInfo

  """Get the active setting"""
  currentSetting: Setting

  """Search brands by category slug"""
  getBrandsByCategory(categorySlug: String!): [Brand]

  """Search brands by categories slugs"""
  getBrandsByCategories(slugs: [String!]!): [Brand]

  """Search products based on brands and category slug"""
  getProductByCategoryBrand(categorySlug: String!, brandSlug: String!): [Product]

  """Find One Product in the Database"""
  getProduct(filter: FilterGetProductInput): ProductProfile

  """Pagination for products"""
  productPaginationByCategories(data: ProductPaginationByCategoriesInput): ProductPaginationByCategoriesInfo

  """..."""
  homeProducts: [Product]
}

type Mutation {
  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateBillById(_id: MongoID!, record: UpdateByIdBillInput!): UpdateByIdBillPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateBill(
    record: UpdateOneBillInput!

    """Filter by fields"""
    filter: FilterUpdateOneBillInput
    sort: SortUpdateOneBillInput
    skip: Int
  ): UpdateOneBillPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateBills(
    record: UpdateManyBillInput!

    """Filter by fields"""
    filter: FilterUpdateManyBillInput
    sort: SortUpdateManyBillInput
    skip: Int
    limit: Int = 100
  ): UpdateManyBillPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteBillById(_id: MongoID!): RemoveByIdBillPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteBill(
    """Filter by fields"""
    filter: FilterRemoveOneBillInput
    sort: SortRemoveOneBillInput
  ): RemoveOneBillPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteBills(
    """Filter by fields"""
    filter: FilterRemoveManyBillInput!
    limit: Int = 100
  ): RemoveManyBillPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createBrand(record: CreateOneBrandInput!): CreateOneBrandPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyBrands(records: [CreateManyBrandInput!]!): CreateManyBrandPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateBrandById(_id: MongoID!, record: UpdateByIdBrandInput!): UpdateByIdBrandPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateBrand(
    record: UpdateOneBrandInput!

    """Filter by fields"""
    filter: FilterUpdateOneBrandInput
    sort: SortUpdateOneBrandInput
    skip: Int
  ): UpdateOneBrandPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateBrands(
    record: UpdateManyBrandInput!

    """Filter by fields"""
    filter: FilterUpdateManyBrandInput
    sort: SortUpdateManyBrandInput
    skip: Int
    limit: Int = 100
  ): UpdateManyBrandPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteBrandById(_id: MongoID!): RemoveByIdBrandPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteBrand(
    """Filter by fields"""
    filter: FilterRemoveOneBrandInput
    sort: SortRemoveOneBrandInput
  ): RemoveOneBrandPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteBrands(
    """Filter by fields"""
    filter: FilterRemoveManyBrandInput!
    limit: Int = 100
  ): RemoveManyBrandPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createCategory(record: CreateOneCategoryInput!): CreateOneCategoryPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyCategories(records: [CreateManyCategoryInput!]!): CreateManyCategoryPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCategoryById(_id: MongoID!, record: UpdateByIdCategoryInput!): UpdateByIdCategoryPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCategory(
    record: UpdateOneCategoryInput!

    """Filter by fields"""
    filter: FilterUpdateOneCategoryInput
    sort: SortUpdateOneCategoryInput
    skip: Int
  ): UpdateOneCategoryPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateCategories(
    record: UpdateManyCategoryInput!

    """Filter by fields"""
    filter: FilterUpdateManyCategoryInput
    sort: SortUpdateManyCategoryInput
    skip: Int
    limit: Int = 100
  ): UpdateManyCategoryPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteCategoryById(_id: MongoID!): RemoveByIdCategoryPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteCategory(
    """Filter by fields"""
    filter: FilterRemoveOneCategoryInput
    sort: SortRemoveOneCategoryInput
  ): RemoveOneCategoryPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteCategories(
    """Filter by fields"""
    filter: FilterRemoveManyCategoryInput!
    limit: Int = 100
  ): RemoveManyCategoryPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createClient(record: CreateOneClientInput!): CreateOneClientPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyClients(records: [CreateManyClientInput!]!): CreateManyClientPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateClientById(_id: MongoID!, record: UpdateByIdClientInput!): UpdateByIdClientPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateClient(
    record: UpdateOneClientInput!

    """Filter by fields"""
    filter: FilterUpdateOneClientInput
    sort: SortUpdateOneClientInput
    skip: Int
  ): UpdateOneClientPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateClients(
    record: UpdateManyClientInput!

    """Filter by fields"""
    filter: FilterUpdateManyClientInput
    sort: SortUpdateManyClientInput
    skip: Int
    limit: Int = 100
  ): UpdateManyClientPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteClientById(_id: MongoID!): RemoveByIdClientPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteClient(
    """Filter by fields"""
    filter: FilterRemoveOneClientInput
    sort: SortRemoveOneClientInput
  ): RemoveOneClientPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteClients(
    """Filter by fields"""
    filter: FilterRemoveManyClientInput!
    limit: Int = 100
  ): RemoveManyClientPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createCredit(record: CreateOneCreditInput!): CreateOneCreditPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyCredits(records: [CreateManyCreditInput!]!): CreateManyCreditPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCreditById(_id: MongoID!, record: UpdateByIdCreditInput!): UpdateByIdCreditPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCredit(
    record: UpdateOneCreditInput!

    """Filter by fields"""
    filter: FilterUpdateOneCreditInput
    sort: SortUpdateOneCreditInput
    skip: Int
  ): UpdateOneCreditPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateCredits(
    record: UpdateManyCreditInput!

    """Filter by fields"""
    filter: FilterUpdateManyCreditInput
    sort: SortUpdateManyCreditInput
    skip: Int
    limit: Int = 100
  ): UpdateManyCreditPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteCreditById(_id: MongoID!): RemoveByIdCreditPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteCredit(
    """Filter by fields"""
    filter: FilterRemoveOneCreditInput
    sort: SortRemoveOneCreditInput
  ): RemoveOneCreditPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteCredits(
    """Filter by fields"""
    filter: FilterRemoveManyCreditInput!
    limit: Int = 100
  ): RemoveManyCreditPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createCreditNote(record: CreateOneCreditNoteInput!): CreateOneCreditNotePayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyCreditNotes(records: [CreateManyCreditNoteInput!]!): CreateManyCreditNotePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCreditNoteById(_id: MongoID!, record: UpdateByIdCreditNoteInput!): UpdateByIdCreditNotePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCreditNote(
    record: UpdateOneCreditNoteInput!

    """Filter by fields"""
    filter: FilterUpdateOneCreditNoteInput
    sort: SortUpdateOneCreditNoteInput
    skip: Int
  ): UpdateOneCreditNotePayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateCreditNotes(
    record: UpdateManyCreditNoteInput!

    """Filter by fields"""
    filter: FilterUpdateManyCreditNoteInput
    sort: SortUpdateManyCreditNoteInput
    skip: Int
    limit: Int = 100
  ): UpdateManyCreditNotePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteCreditNoteById(_id: MongoID!): RemoveByIdCreditNotePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteCreditNote(
    """Filter by fields"""
    filter: FilterRemoveOneCreditNoteInput
    sort: SortRemoveOneCreditNoteInput
  ): RemoveOneCreditNotePayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteCreditNotes(
    """Filter by fields"""
    filter: FilterRemoveManyCreditNoteInput!
    limit: Int = 100
  ): RemoveManyCreditNotePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createCurrency(record: CreateOneCurrencyInput!): CreateOneCurrencyPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyCurrency(records: [CreateManyCurrencyInput!]!): CreateManyCurrencyPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCurrencyById(_id: MongoID!, record: UpdateByIdCurrencyInput!): UpdateByIdCurrencyPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateCurrency(
    record: UpdateOneCurrencyInput!

    """Filter by fields"""
    filter: FilterUpdateOneCurrencyInput
    sort: SortUpdateOneCurrencyInput
    skip: Int
  ): UpdateOneCurrencyPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateCurrencies(
    record: UpdateManyCurrencyInput!

    """Filter by fields"""
    filter: FilterUpdateManyCurrencyInput
    sort: SortUpdateManyCurrencyInput
    skip: Int
    limit: Int = 100
  ): UpdateManyCurrencyPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteCurrencyById(_id: MongoID!): RemoveByIdCurrencyPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteCurrency(
    """Filter by fields"""
    filter: FilterRemoveOneCurrencyInput
    sort: SortRemoveOneCurrencyInput
  ): RemoveOneCurrencyPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteCurrencies(
    """Filter by fields"""
    filter: FilterRemoveManyCurrencyInput!
    limit: Int = 100
  ): RemoveManyCurrencyPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createDeliveryNote(record: CreateOneDeliveryNoteInput!): CreateOneDeliveryNotePayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyDeliveryNote(records: [CreateManyDeliveryNoteInput!]!): CreateManyDeliveryNotePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateDeliveryNoteById(_id: MongoID!, record: UpdateByIdDeliveryNoteInput!): UpdateByIdDeliveryNotePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateDeliveryNote(
    record: UpdateOneDeliveryNoteInput!

    """Filter by fields"""
    filter: FilterUpdateOneDeliveryNoteInput
    sort: SortUpdateOneDeliveryNoteInput
    skip: Int
  ): UpdateOneDeliveryNotePayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateDeliveryNotes(
    record: UpdateManyDeliveryNoteInput!

    """Filter by fields"""
    filter: FilterUpdateManyDeliveryNoteInput
    sort: SortUpdateManyDeliveryNoteInput
    skip: Int
    limit: Int = 100
  ): UpdateManyDeliveryNotePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteDeliveryNoteById(_id: MongoID!): RemoveByIdDeliveryNotePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteDeliveryNote(
    """Filter by fields"""
    filter: FilterRemoveOneDeliveryNoteInput
    sort: SortRemoveOneDeliveryNoteInput
  ): RemoveOneDeliveryNotePayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteDeliveryNotes(
    """Filter by fields"""
    filter: FilterRemoveManyDeliveryNoteInput!
    limit: Int = 100
  ): RemoveManyDeliveryNotePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createLocation(record: CreateOneLocationInput!): CreateOneLocationPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyLocation(records: [CreateManyLocationInput!]!): CreateManyLocationPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateLocationById(_id: MongoID!, record: UpdateByIdLocationInput!): UpdateByIdLocationPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateLocation(
    record: UpdateOneLocationInput!

    """Filter by fields"""
    filter: FilterUpdateOneLocationInput
    sort: SortUpdateOneLocationInput
    skip: Int
  ): UpdateOneLocationPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateLocations(
    record: UpdateManyLocationInput!

    """Filter by fields"""
    filter: FilterUpdateManyLocationInput
    sort: SortUpdateManyLocationInput
    skip: Int
    limit: Int = 100
  ): UpdateManyLocationPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteLocationById(_id: MongoID!): RemoveByIdLocationPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteLocation(
    """Filter by fields"""
    filter: FilterRemoveOneLocationInput
    sort: SortRemoveOneLocationInput
  ): RemoveOneLocationPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteLocations(
    """Filter by fields"""
    filter: FilterRemoveManyLocationInput!
    limit: Int = 100
  ): RemoveManyLocationPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createModel(record: CreateOneModelInput!): CreateOneModelPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyModel(records: [CreateManyModelInput!]!): CreateManyModelPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateModelById(_id: MongoID!, record: UpdateByIdModelInput!): UpdateByIdModelPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateModel(
    record: UpdateOneModelInput!

    """Filter by fields"""
    filter: FilterUpdateOneModelInput
    sort: SortUpdateOneModelInput
    skip: Int
  ): UpdateOneModelPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateModels(
    record: UpdateManyModelInput!

    """Filter by fields"""
    filter: FilterUpdateManyModelInput
    sort: SortUpdateManyModelInput
    skip: Int
    limit: Int = 100
  ): UpdateManyModelPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteModelById(_id: MongoID!): RemoveByIdModelPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteModel(
    """Filter by fields"""
    filter: FilterRemoveOneModelInput
    sort: SortRemoveOneModelInput
  ): RemoveOneModelPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteModels(
    """Filter by fields"""
    filter: FilterRemoveManyModelInput!
    limit: Int = 100
  ): RemoveManyModelPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteOrderById(_id: MongoID!): RemoveByIdOrderPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteOrder(
    """Filter by fields"""
    filter: FilterRemoveOneOrderInput
    sort: SortRemoveOneOrderInput
  ): RemoveOneOrderPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteOrders(
    """Filter by fields"""
    filter: FilterRemoveManyOrderInput!
    limit: Int = 100
  ): RemoveManyOrderPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createOrderProduct(record: CreateOneOrderProductInput!): CreateOneOrderProductPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyOrderProduct(records: [CreateManyOrderProductInput!]!): CreateManyOrderProductPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateOrderProductById(_id: MongoID!, record: UpdateByIdOrderProductInput!): UpdateByIdOrderProductPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateOrderProduct(
    record: UpdateOneOrderProductInput!

    """Filter by fields"""
    filter: FilterUpdateOneOrderProductInput
    sort: SortUpdateOneOrderProductInput
    skip: Int
  ): UpdateOneOrderProductPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateOrderProducts(
    record: UpdateManyOrderProductInput!

    """Filter by fields"""
    filter: FilterUpdateManyOrderProductInput
    sort: SortUpdateManyOrderProductInput
    skip: Int
    limit: Int = 100
  ): UpdateManyOrderProductPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteOrderProductById(_id: MongoID!): RemoveByIdOrderProductPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteOrderProduct(
    """Filter by fields"""
    filter: FilterRemoveOneOrderProductInput
    sort: SortRemoveOneOrderProductInput
  ): RemoveOneOrderProductPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteOrderProducts(
    """Filter by fields"""
    filter: FilterRemoveManyOrderProductInput!
    limit: Int = 100
  ): RemoveManyOrderProductPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteProductById(_id: MongoID!): RemoveByIdProductPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteProduct(
    """Filter by fields"""
    filter: FilterRemoveOneProductInput
    sort: SortRemoveOneProductInput
  ): RemoveOneProductPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteProducts(
    """Filter by fields"""
    filter: FilterRemoveManyProductInput!
    limit: Int = 100
  ): RemoveManyProductPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createPromoCode(record: CreateOnePromoCodeInput!): CreateOnePromoCodePayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyPromoCode(records: [CreateManyPromoCodeInput!]!): CreateManyPromoCodePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updatePromoCodeById(_id: MongoID!, record: UpdateByIdPromoCodeInput!): UpdateByIdPromoCodePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updatePromoCode(
    record: UpdateOnePromoCodeInput!

    """Filter by fields"""
    filter: FilterUpdateOnePromoCodeInput
    sort: SortUpdateOnePromoCodeInput
    skip: Int
  ): UpdateOnePromoCodePayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updatePromoCodes(
    record: UpdateManyPromoCodeInput!

    """Filter by fields"""
    filter: FilterUpdateManyPromoCodeInput
    sort: SortUpdateManyPromoCodeInput
    skip: Int
    limit: Int = 100
  ): UpdateManyPromoCodePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deletePromoCodeById(_id: MongoID!): RemoveByIdPromoCodePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deletePromoCode(
    """Filter by fields"""
    filter: FilterRemoveOnePromoCodeInput
    sort: SortRemoveOnePromoCodeInput
  ): RemoveOnePromoCodePayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deletePromoCodes(
    """Filter by fields"""
    filter: FilterRemoveManyPromoCodeInput!
    limit: Int = 100
  ): RemoveManyPromoCodePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createShipping(record: CreateOneShippingInput!): CreateOneShippingPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyShipping(records: [CreateManyShippingInput!]!): CreateManyShippingPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateShippingById(_id: MongoID!, record: UpdateByIdShippingInput!): UpdateByIdShippingPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateShipping(
    record: UpdateOneShippingInput!

    """Filter by fields"""
    filter: FilterUpdateOneShippingInput
    sort: SortUpdateOneShippingInput
    skip: Int
  ): UpdateOneShippingPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateShippings(
    record: UpdateManyShippingInput!

    """Filter by fields"""
    filter: FilterUpdateManyShippingInput
    sort: SortUpdateManyShippingInput
    skip: Int
    limit: Int = 100
  ): UpdateManyShippingPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteShippingById(_id: MongoID!): RemoveByIdShippingPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteShipping(
    """Filter by fields"""
    filter: FilterRemoveOneShippingInput
    sort: SortRemoveOneShippingInput
  ): RemoveOneShippingPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteShippings(
    """Filter by fields"""
    filter: FilterRemoveManyShippingInput!
    limit: Int = 100
  ): RemoveManyShippingPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createShopCart(record: CreateOneShopCartInput!): CreateOneShopCartPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyShopCart(records: [CreateManyShopCartInput!]!): CreateManyShopCartPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateShopCartById(_id: MongoID!, record: UpdateByIdShopCartInput!): UpdateByIdShopCartPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateShopCart(
    record: UpdateOneShopCartInput!

    """Filter by fields"""
    filter: FilterUpdateOneShopCartInput
    sort: SortUpdateOneShopCartInput
    skip: Int
  ): UpdateOneShopCartPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateShopCarts(
    record: UpdateManyShopCartInput!

    """Filter by fields"""
    filter: FilterUpdateManyShopCartInput
    sort: SortUpdateManyShopCartInput
    skip: Int
    limit: Int = 100
  ): UpdateManyShopCartPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteShopCartById(_id: MongoID!): RemoveByIdShopCartPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteShopCart(
    """Filter by fields"""
    filter: FilterRemoveOneShopCartInput
    sort: SortRemoveOneShopCartInput
  ): RemoveOneShopCartPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteShopCarts(
    """Filter by fields"""
    filter: FilterRemoveManyShopCartInput!
    limit: Int = 100
  ): RemoveManyShopCartPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createSupplier(record: CreateOneSupplierInput!): CreateOneSupplierPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManySupplier(records: [CreateManySupplierInput!]!): CreateManySupplierPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateSupplierById(_id: MongoID!, record: UpdateByIdSupplierInput!): UpdateByIdSupplierPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateSupplier(
    record: UpdateOneSupplierInput!

    """Filter by fields"""
    filter: FilterUpdateOneSupplierInput
    sort: SortUpdateOneSupplierInput
    skip: Int
  ): UpdateOneSupplierPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateSuppliers(
    record: UpdateManySupplierInput!

    """Filter by fields"""
    filter: FilterUpdateManySupplierInput
    sort: SortUpdateManySupplierInput
    skip: Int
    limit: Int = 100
  ): UpdateManySupplierPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteSupplierById(_id: MongoID!): RemoveByIdSupplierPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteSupplier(
    """Filter by fields"""
    filter: FilterRemoveOneSupplierInput
    sort: SortRemoveOneSupplierInput
  ): RemoveOneSupplierPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteSuppliers(
    """Filter by fields"""
    filter: FilterRemoveManySupplierInput!
    limit: Int = 100
  ): RemoveManySupplierPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createUser(record: CreateOneUserInput!): CreateOneUserPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyUsers(records: [CreateManyUserInput!]!): CreateManyUserPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateUserById(_id: MongoID!, record: UpdateByIdUserInput!): UpdateByIdUserPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateUser(
    record: UpdateOneUserInput!

    """Filter by fields"""
    filter: FilterUpdateOneUserInput
    sort: SortUpdateOneUserInput
    skip: Int
  ): UpdateOneUserPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateUsers(
    record: UpdateManyUserInput!

    """Filter by fields"""
    filter: FilterUpdateManyUserInput
    sort: SortUpdateManyUserInput
    skip: Int
    limit: Int = 100
  ): UpdateManyUserPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteUserById(_id: MongoID!): RemoveByIdUserPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteUser(
    """Filter by fields"""
    filter: FilterRemoveOneUserInput
    sort: SortRemoveOneUserInput
  ): RemoveOneUserPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteUsers(
    """Filter by fields"""
    filter: FilterRemoveManyUserInput!
    limit: Int = 100
  ): RemoveManyUserPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createVariant(record: CreateOneVariantInput!): CreateOneVariantPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyVariants(records: [CreateManyVariantInput!]!): CreateManyVariantPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateVariantById(_id: MongoID!, record: UpdateByIdVariantInput!): UpdateByIdVariantPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateVariant(
    record: UpdateOneVariantInput!

    """Filter by fields"""
    filter: FilterUpdateOneVariantInput
    sort: SortUpdateOneVariantInput
    skip: Int
  ): UpdateOneVariantPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateVariants(
    record: UpdateManyVariantInput!

    """Filter by fields"""
    filter: FilterUpdateManyVariantInput
    sort: SortUpdateManyVariantInput
    skip: Int
    limit: Int = 100
  ): UpdateManyVariantPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteVariantById(_id: MongoID!): RemoveByIdVariantPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteVariant(
    """Filter by fields"""
    filter: FilterRemoveOneVariantInput
    sort: SortRemoveOneVariantInput
  ): RemoveOneVariantPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteVariants(
    """Filter by fields"""
    filter: FilterRemoveManyVariantInput!
    limit: Int = 100
  ): RemoveManyVariantPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createVariantValue(record: CreateOneVariantValueInput!): CreateOneVariantValuePayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  createManyVariantValues(records: [CreateManyVariantValueInput!]!): CreateManyVariantValuePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateVariantValueById(_id: MongoID!, record: UpdateByIdVariantValueInput!): UpdateByIdVariantValuePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateVariantValue(
    record: UpdateOneVariantValueInput!

    """Filter by fields"""
    filter: FilterUpdateOneVariantValueInput
    sort: SortUpdateOneVariantValueInput
    skip: Int
  ): UpdateOneVariantValuePayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  updateVariantValues(
    record: UpdateManyVariantValueInput!

    """Filter by fields"""
    filter: FilterUpdateManyVariantValueInput
    sort: SortUpdateManyVariantValueInput
    skip: Int
    limit: Int = 100
  ): UpdateManyVariantValuePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  deleteVariantValueById(_id: MongoID!): RemoveByIdVariantValuePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  deleteVariantValue(
    """Filter by fields"""
    filter: FilterRemoveOneVariantValueInput
    sort: SortRemoveOneVariantValueInput
  ): RemoveOneVariantValuePayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  deleteVariantValues(
    """Filter by fields"""
    filter: FilterRemoveManyVariantValueInput!
    limit: Int = 100
  ): RemoveManyVariantValuePayload

  """Login for a existing user in the db"""
  signIn(email: String!, password: String!): User

  """Sign Up for a new user in the db"""
  signUp(name: String!, email: String!, password: String!, dni: String, dniType: Int, privilege: Int, commission: Float, phone: String, newsLetter: Boolean): User

  """Sign Out the user from the app"""
  signOut: SignOutMessage

  """Create a new product into the database"""
  createProduct(data: CreateProductInput): Product

  """Update a product into the database"""
  updateProduct(data: UpdateProductInput, filter: FilterOneProduct): Product

  """..."""
  uploadManyProducts(data: UploadManyProductsInput): UploadResponse

  """Add an Item To Shopping Cart"""
  addItemToCart(data: AddItemToCartInput): ShopCart

  """Remove an Item from the Shopping Cart"""
  removeItemFromCart(data: RemoveItemFromCartInput): ShopCart

  """Increase in one an Item of the Shopping Cart"""
  increaseOneItemOfCart(data: IncreaseItemOfCartInput): ShopCart

  """Decrease in one an Item of the Shopping Cart"""
  decreaseOneItemOfCart(data: DecreaseItemOfCartInput): ShopCart

  """"""
  createOrder(data: CreateOrderInput): Order

  """Change the status of an order and generate a bill"""
  updateOrder(data: UpdateOrderInput): Order

  """Generate a Bill based on a"""
  createBill(data: CreateBillInput): Bill

  """Generate a setting config"""
  createSetting(data: CreateSettingInput): Setting

  """Update a setting config"""
  updateSetting(data: UpdateSettingInput): Setting

  """Create a Comment for a product"""
  createComment(data: CreateCommentInput): Comment

  """Reset Password"""
  resetPassword(data: ResetPasswordInput): ResetPasswordInfo

  """Change Password"""
  changePassword(data: ChangePasswordInput): ResetPasswordInfo
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum SortConnectionBillEnum {
  _ID_DESC
  _ID_ASC
  CONTROLNUMBER_DESC
  CONTROLNUMBER_ASC
}

enum SortConnectionBrandEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionCategoryEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionClientEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionCreditEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionCreditNoteEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionCurrencyEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionDeliveryNoteEnum {
  _ID_DESC
  _ID_ASC
  CONTROLNUMBER_DESC
  CONTROLNUMBER_ASC
}

enum SortConnectionLocationEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionModelEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionOrderEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionOrderProductEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionProductEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionPromoCodeEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionSettingEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionShippingEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionShopCartEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionSupplierEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionUserEnum {
  _ID_DESC
  _ID_ASC
  EMAIL_DESC
  EMAIL_ASC
}

enum SortConnectionVariantEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionVariantValueEnum {
  _ID_DESC
  _ID_ASC
}

enum SortFindByIdsBillInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortFindByIdsBrandInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsCategoryInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsClientInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsCreditInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsCreditNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsCurrencyInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsDeliveryNoteInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortFindByIdsLocationInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsModelInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsOrderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsOrderProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPromoCodeInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSettingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsShippingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsShopCartInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSupplierInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortFindByIdsVariantInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsVariantValueInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyBillInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortFindManyBrandInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCategoryInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyClientInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCreditInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCreditNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCurrencyInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyDeliveryNoteInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortFindManyLocationInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyModelInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyOrderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyOrderProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPromoCodeInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManySettingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyShippingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyShopCartInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManySupplierInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortFindManyVariantInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyVariantValueInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneBillInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortFindOneBrandInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCategoryInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneClientInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCreditInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCreditNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCurrencyInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneDeliveryNoteInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortFindOneLocationInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneModelInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneOrderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneOrderProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePromoCodeInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneSettingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneShippingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneShopCartInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneSupplierInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortFindOneVariantInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneVariantValueInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneBillInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortRemoveOneBrandInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCategoryInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneClientInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCreditInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCreditNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCurrencyInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneDeliveryNoteInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortRemoveOneLocationInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneModelInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneOrderInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneOrderProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnePromoCodeInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneShippingInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneShopCartInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneSupplierInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortRemoveOneVariantInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneVariantValueInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyBillInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortUpdateManyBrandInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyCategoryInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyClientInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyCreditInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyCreditNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyCurrencyInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyDeliveryNoteInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortUpdateManyLocationInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyModelInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyOrderProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyPromoCodeInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyShippingInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyShopCartInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManySupplierInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortUpdateManyVariantInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyVariantValueInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneBillInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortUpdateOneBrandInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCategoryInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneClientInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCreditInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCreditNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCurrencyInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneDeliveryNoteInput {
  _ID_ASC
  _ID_DESC
  CONTROLNUMBER_ASC
  CONTROLNUMBER_DESC
}

enum SortUpdateOneLocationInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneModelInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneOrderProductInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnePromoCodeInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneShippingInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneShopCartInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneSupplierInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortUpdateOneVariantInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneVariantValueInput {
  _ID_ASC
  _ID_DESC
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

type Address {
  country: String!
  state: String!
  municipality: String!
  neighborhood: String!
  street: String!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type Bill {
  controlNumber: String!
  order: Order
  currency: Currency
  rate: Float!
  paid: Boolean!
  paymentMetadata: JSON
  charges: [BillCharges]
  subtotal: Float!
  tax: Float!
  discount: Float!
  total: Float!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type BillCharges {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

"""A connection to a list of items."""
type BillConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [BillEdge!]!
}

"""An edge in a connection."""
type BillEdge {
  """The item at the end of the edge"""
  node: Bill!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type BillPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Bill!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Brand {
  slug: String
  name: String!
  active: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type BrandConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [BrandEdge!]!
}

"""An edge in a connection."""
type BrandEdge {
  """The item at the end of the edge"""
  node: Brand!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type BrandPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Brand!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Category {
  slug: String
  name: String!
  photo: String
  products: [Product]!
  active: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type CategoryConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CategoryEdge!]!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge"""
  node: Category!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type CategoryPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Category!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Client {
  address: [Address]!
  phone: String
  points: Float
  user: User
  shopCart: ShopCart
  orders: [Order]!
  bills: [User]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type ClientConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ClientEdge!]!
}

"""An edge in a connection."""
type ClientEdge {
  """The item at the end of the edge"""
  node: Client!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type ClientPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Client!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Comment {
  text: String!
  rating: Float!
  product: Product
  client: User
  active: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type CreateManyBrandPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Brand!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyCategoryPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Category!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyClientPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Client!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyCreditNotePayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [CreditNote!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyCreditPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Credit!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyCurrencyPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Currency!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyDeliveryNotePayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [DeliveryNote!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyLocationPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Location!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyModelPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Model!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyOrderProductPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [OrderProduct!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyPromoCodePayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [PromoCode!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyShippingPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Shipping!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyShopCartPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [ShopCart!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManySupplierPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Supplier!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyUserPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [User!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyVariantPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Variant!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateManyVariantValuePayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [VariantValue!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneBrandPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Brand

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneCategoryPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Category

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneClientPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Client

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneCreditNotePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: CreditNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneCreditPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Credit

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneCurrencyPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Currency

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneDeliveryNotePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: DeliveryNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneLocationPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Location

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneModelPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Model

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneOrderProductPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: OrderProduct

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOnePromoCodePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: PromoCode

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneShippingPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Shipping

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneShopCartPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: ShopCart

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneSupplierPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Supplier

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneVariantPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Variant

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneVariantValuePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: VariantValue

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type Credit {
  duration: Date!
  total: Float!
  interestRate: Float!
  status: Float!
  order: Order
  issuer: User
  client: Client
  payments: [CreditPayments]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type CreditConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CreditEdge!]!
}

"""An edge in a connection."""
type CreditEdge {
  """The item at the end of the edge"""
  node: Credit!

  """A cursor for use in pagination"""
  cursor: String!
}

type CreditNote {
  total: Float!
  bill: Bill
  issuer: User
  client: Client
  products: [OrderProduct]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type CreditNoteConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CreditNoteEdge!]!
}

"""An edge in a connection."""
type CreditNoteEdge {
  """The item at the end of the edge"""
  node: CreditNote!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type CreditNotePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [CreditNote!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

"""List of items with pagination."""
type CreditPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Credit!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type CreditPayments {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

type Currency {
  slug: String
  name: String!
  symbol: String!
  rate: Float!
  active: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type CurrencyConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CurrencyEdge!]!
}

"""An edge in a connection."""
type CurrencyEdge {
  """The item at the end of the edge"""
  node: Currency!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type CurrencyPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Currency!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type DeliveryNote {
  controlNumber: String!
  order: Order
  bill: Bill
  paid: Boolean!
  paymentMetadata: JSON
  generateBill: Boolean!
  charges: [DeliveryNoteCharges]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type DeliveryNoteCharges {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

"""A connection to a list of items."""
type DeliveryNoteConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [DeliveryNoteEdge!]!
}

"""An edge in a connection."""
type DeliveryNoteEdge {
  """The item at the end of the edge"""
  node: DeliveryNote!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type DeliveryNotePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [DeliveryNote!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Location {
  slug: String
  name: String!
  address: String!
  shippingOptions: [Shipping]!
  lat: Float!
  lon: Float!
  active: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type LocationConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [LocationEdge!]!
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge"""
  node: Location!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type LocationPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Location!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Model {
  slug: String
  name: String!
  brand: Brand
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type ModelConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ModelEdge!]!
}

"""An edge in a connection."""
type ModelEdge {
  """The item at the end of the edge"""
  node: Model!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type ModelPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Model!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Order {
  status: Float!
  code: Float
  paid: Boolean!
  subtotal: Float!
  tax: Float!
  extraFees: Float!
  discount: Float!
  total: Float!
  commission: Float!
  products: [OrderProduct]!
  client: User
  shipping: Shipping
  phone: String
  seller: User
  charges: [OrderCharges]
  address: String
  rate: Float
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type OrderCharges {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

"""A connection to a list of items."""
type OrderConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [OrderEdge!]!
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge"""
  node: Order!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type OrderPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Order!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type OrderProduct {
  quantity: Float!
  price: Float!
  title: String!
  isService: Boolean!
  active: Boolean!
  photo: String!
  brand: String!
  model: String
  variant1: String!
  variant2: String
  variant3: String
  sku: String
  product: Product
  variantValue: VariantValue
  location: Location
  shopCart: ShopCart
  order: Order
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type OrderProductConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [OrderProductEdge!]!
}

"""An edge in a connection."""
type OrderProductEdge {
  """The item at the end of the edge"""
  node: OrderProduct!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type OrderProductPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [OrderProduct!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Product {
  slug: String
  title: String!
  altCode: String
  description: String
  dataSheet: String
  sku: String
  priority: Float!
  rating: Float
  points: Float
  reviews: Float
  isService: Boolean
  active: Boolean
  volatileInventory: Boolean
  photos: [String]
  price: Float
  compareAtPrice: Float
  extraInfo: [ProductExtraInfo]
  brand: Brand
  comments: [Comment]!
  _model: MongoID
  variants: [Variant]!
  variantValues: [VariantValue]!
  suppliers: [MongoID]
  categories: [Category]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
  model: Model
  supplier: [Supplier]!
}

"""A connection to a list of items."""
type ProductConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProductEdge!]!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge"""
  node: Product!

  """A cursor for use in pagination"""
  cursor: String!
}

type ProductExtraInfo {
  name: String
  value: String
  _id: MongoID
}

"""List of items with pagination."""
type ProductPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Product!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type ProductPaginationByCategoriesInfo {
  count: Int
  items: [Product!]
  pageInfo: PaginationInfo!
}

type ProductProfile {
  product: Product!
  suggestions: [Product]!
}

type PromoCode {
  slug: String
  name: String!
  code: String!
  discount: Float!
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type PromoCodeConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [PromoCodeEdge!]!
}

"""An edge in a connection."""
type PromoCodeEdge {
  """The item at the end of the edge"""
  node: PromoCode!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type PromoCodePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [PromoCode!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type RemoveByIdBillPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Bill

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdBrandPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Brand

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdCategoryPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Category

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdClientPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Client

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdCreditNotePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: CreditNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdCreditPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Credit

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdCurrencyPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Currency

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdDeliveryNotePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: DeliveryNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdLocationPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Location

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdModelPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Model

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdOrderPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Order

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdOrderProductPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: OrderProduct

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdProductPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Product

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdPromoCodePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: PromoCode

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdShippingPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Shipping

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdShopCartPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: ShopCart

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdSupplierPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Supplier

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdVariantPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Variant

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdVariantValuePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: VariantValue

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyBillPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyBrandPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyCategoryPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyClientPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyCreditNotePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyCreditPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyCurrencyPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyDeliveryNotePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyLocationPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyModelPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyOrderPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyOrderProductPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyProductPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyPromoCodePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyShippingPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyShopCartPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManySupplierPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyVariantPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyVariantValuePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneBillPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Bill

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneBrandPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Brand

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneCategoryPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Category

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneClientPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Client

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneCreditNotePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: CreditNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneCreditPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Credit

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneCurrencyPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Currency

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneDeliveryNotePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: DeliveryNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneLocationPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Location

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneModelPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Model

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneOrderPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Order

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneOrderProductPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: OrderProduct

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneProductPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Product

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOnePromoCodePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: PromoCode

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneShippingPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Shipping

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneShopCartPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: ShopCart

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneSupplierPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Supplier

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneVariantPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Variant

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneVariantValuePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: VariantValue

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type ResetPasswordInfo {
  success: Boolean!
  err: String
}

type SearchCategoriesByCategory {
  category: Category!
  products: [Product]!
}

type SearchCategoriesByCategoryType {
  data: [SearchCategoriesByCategory]
}

type Setting {
  carouselImages: [SettingCarouselImages]
  promotions: [SettingPromotions]
  banner: SettingBanner
  categories: [Category]!
  active: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type SettingBanner {
  text: String
  active: Boolean
}

type SettingCarouselImages {
  title: String
  description: String
  url: String
  _id: MongoID
}

"""A connection to a list of items."""
type SettingConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SettingEdge!]!
}

"""An edge in a connection."""
type SettingEdge {
  """The item at the end of the edge"""
  node: Setting!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type SettingPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Setting!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type SettingPromotions {
  title: String
  description: String
  url: String
  _id: MongoID
}

type Shipping {
  slug: String
  name: String!
  price: Float!
  active: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type ShippingConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ShippingEdge!]!
}

"""An edge in a connection."""
type ShippingEdge {
  """The item at the end of the edge"""
  node: Shipping!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type ShippingPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Shipping!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type ShopCart {
  client: Client
  items: [OrderProduct]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type ShopCartConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ShopCartEdge!]!
}

"""An edge in a connection."""
type ShopCartEdge {
  """The item at the end of the edge"""
  node: ShopCart!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type ShopCartPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [ShopCart!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type SignOutMessage {
  success: Boolean!
}

type Supplier {
  slug: String
  name: String!
  active: Boolean
  products: [Product]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type SupplierConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SupplierEdge!]!
}

"""An edge in a connection."""
type SupplierEdge {
  """The item at the end of the edge"""
  node: Supplier!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type SupplierPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Supplier!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type UpdateByIdBillPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Bill

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdBrandPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Brand

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdCategoryPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Category

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdClientPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Client

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdCreditNotePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: CreditNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdCreditPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Credit

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdCurrencyPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Currency

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdDeliveryNotePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: DeliveryNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdLocationPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Location

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdModelPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Model

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdOrderProductPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: OrderProduct

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdPromoCodePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: PromoCode

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdShippingPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Shipping

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdShopCartPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: ShopCart

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdSupplierPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Supplier

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdVariantPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Variant

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateByIdVariantValuePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: VariantValue

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyBillPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyBrandPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyCategoryPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyClientPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyCreditNotePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyCreditPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyCurrencyPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyDeliveryNotePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyLocationPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyModelPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyOrderProductPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyPromoCodePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyShippingPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyShopCartPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManySupplierPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyVariantPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyVariantValuePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneBillPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Bill

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneBrandPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Brand

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneCategoryPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Category

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneClientPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Client

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneCreditNotePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: CreditNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneCreditPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Credit

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneCurrencyPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Currency

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneDeliveryNotePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: DeliveryNote

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneLocationPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Location

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneModelPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Model

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneOrderProductPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: OrderProduct

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOnePromoCodePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: PromoCode

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneShippingPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Shipping

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneShopCartPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: ShopCart

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneSupplierPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Supplier

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneVariantPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Variant

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneVariantValuePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: VariantValue

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UploadResponse {
  success: Boolean!
  err: String
  msg: String
}

type User {
  name: String!
  email: String!
  password: String!
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float!
  commission: Float
  client: Client
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type UserConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserEdge!]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type UserPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [User!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Variant {
  title: String!
  tags: [String]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type VariantConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [VariantEdge!]!
}

"""An edge in a connection."""
type VariantEdge {
  """The item at the end of the edge"""
  node: Variant!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type VariantPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Variant!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type VariantValue {
  value: VariantValueValue
  price: Float!
  compareAtPrice: Float
  quantity: Float!
  photo: String
  sku: String
  product: Product
  location: Location
  disabled: Boolean
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type VariantValueConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [VariantValueEdge!]!
}

"""An edge in a connection."""
type VariantValueEdge {
  """The item at the end of the edge"""
  node: VariantValue!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type VariantValuePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [VariantValue!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type VariantValueValue {
  variant1: String!
  variant2: String
  variant3: String
}

input AddItemToCartInput {
  shopCartId: String!
  variantValueId: String!
  productId: String!
  quantity: Int!
}

input ChangePasswordInput {
  token: String!
  password: String!
}

input CreateBannerInput {
  text: String!
  active: Boolean!
}

input CreateBillInput {
  deliveryNoteId: String!
  currencyId: String!
  rate: Int!
}

input CreateCarouselImageInput {
  title: String
  description: String
  url: String!
}

input CreateChargeInput {
  ref: String!
  method: String!
  bank: String
  amount: Float!
}

input CreateCommentInput {
  userId: MongoID!
  productId: MongoID!
  text: String!
  rating: Int!
}

input CreateExtraInfoInput {
  name: String!
  value: String!
}

""""""
input CreateManyBrandInput {
  slug: String
  name: String!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyCategoryInput {
  slug: String
  name: String!
  photo: String
  products: [MongoID]
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID!
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyCreditInput {
  duration: Date!
  total: Float!
  interestRate: Float!
  status: Float!
  order: MongoID!
  issuer: MongoID!
  client: MongoID!
  payments: [CreditPaymentsInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyCreditNoteInput {
  total: Float!
  bill: MongoID!
  issuer: MongoID!
  client: MongoID!
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyCurrencyInput {
  slug: String
  name: String!
  symbol: String!
  rate: Float!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyDeliveryNoteInput {
  controlNumber: String!
  order: MongoID!
  bill: MongoID
  paid: Boolean!
  paymentMetadata: JSON
  generateBill: Boolean!
  charges: [DeliveryNoteChargesInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyLocationInput {
  slug: String
  name: String!
  address: String!
  shippingOptions: [MongoID]
  lat: Float!
  lon: Float!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyModelInput {
  slug: String
  name: String!
  brand: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyOrderProductInput {
  quantity: Float!
  price: Float!
  title: String!
  isService: Boolean!
  active: Boolean!
  photo: String!
  brand: String!
  model: String
  variant1: String!
  variant2: String
  variant3: String
  sku: String
  product: MongoID!
  variantValue: MongoID!
  location: MongoID!
  shopCart: MongoID!
  order: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyPromoCodeInput {
  slug: String
  name: String!
  code: String!
  discount: Float!
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyShippingInput {
  slug: String
  name: String!
  price: Float!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyShopCartInput {
  client: MongoID!
  items: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManySupplierInput {
  slug: String
  name: String!
  active: Boolean
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyUserInput {
  name: String!
  email: String!
  password: String!
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float!
  commission: Float
  client: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyVariantInput {
  title: String!
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateManyVariantValueInput {
  value: VariantValueValueInput
  price: Float!
  compareAtPrice: Float
  quantity: Float!
  photo: String
  sku: String
  product: MongoID
  location: MongoID!
  disabled: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneBrandInput {
  slug: String
  name: String!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneCategoryInput {
  slug: String
  name: String!
  photo: String
  products: [MongoID]
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID!
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneCreditInput {
  duration: Date!
  total: Float!
  interestRate: Float!
  status: Float!
  order: MongoID!
  issuer: MongoID!
  client: MongoID!
  payments: [CreditPaymentsInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneCreditNoteInput {
  total: Float!
  bill: MongoID!
  issuer: MongoID!
  client: MongoID!
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneCurrencyInput {
  slug: String
  name: String!
  symbol: String!
  rate: Float!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneDeliveryNoteInput {
  controlNumber: String!
  order: MongoID!
  bill: MongoID
  paid: Boolean!
  paymentMetadata: JSON
  generateBill: Boolean!
  charges: [DeliveryNoteChargesInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneLocationInput {
  slug: String
  name: String!
  address: String!
  shippingOptions: [MongoID]
  lat: Float!
  lon: Float!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneModelInput {
  slug: String
  name: String!
  brand: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneOrderProductInput {
  quantity: Float!
  price: Float!
  title: String!
  isService: Boolean!
  active: Boolean!
  photo: String!
  brand: String!
  model: String
  variant1: String!
  variant2: String
  variant3: String
  sku: String
  product: MongoID!
  variantValue: MongoID!
  location: MongoID!
  shopCart: MongoID!
  order: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOnePromoCodeInput {
  slug: String
  name: String!
  code: String!
  discount: Float!
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneShippingInput {
  slug: String
  name: String!
  price: Float!
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneShopCartInput {
  client: MongoID!
  items: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneSupplierInput {
  slug: String
  name: String!
  active: Boolean
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneUserInput {
  name: String!
  email: String!
  password: String!
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float!
  commission: Float
  client: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneVariantInput {
  title: String!
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input CreateOneVariantValueInput {
  value: VariantValueValueInput
  price: Float!
  compareAtPrice: Float
  quantity: Float!
  photo: String
  sku: String
  product: MongoID
  location: MongoID!
  disabled: Boolean
  updatedAt: Date
  createdAt: Date
}

input CreateOrderInput {
  shopCartId: String!
  userId: String!
  sellerId: String
  phone: String
  promoCode: String
  shipping: String!
  address: String
  rate: Float
  charges: [CreateChargeInput!]!
}

input CreateOrUpdateVariantInput {
  create: [CreateVariantInput]
  update: [UpdateVariantInput]
}

input CreateOrUpdateVariantValueInput {
  create: [CreateVariantValueInput]
  update: [UpdateVariantValueInput]
}

input CreateProductInput {
  title: String!
  description: String!
  dataSheet: String
  priority: Int!
  isService: Boolean
  volatileInventory: Boolean
  photos: [String!]!
  brand: String
  variants: [CreateVariantInput!]
  variantValues: [CreateVariantValueInput!]
  categories: [String!]
  sku: String
  price: Int
  compareAtPrice: Int
  extraInfo: [CreateExtraInfoInput]
  model: String
  supplier: String
}

input CreatePromotionInput {
  title: String
  description: String
  url: String!
}

input CreateSettingInput {
  carouselImages: [CreateCarouselImageInput!]!
  promotions: [CreatePromotionInput!]!
  banner: CreateBannerInput!
  active: Boolean
}

input CreateVariantInput {
  title: String!
  tags: [String!]!
}

input CreateVariantValueInput {
  value: CreateVariantValueValueInput!
  price: Int!
  compareAtPrice: Int
  quantity: Int!
  photo: String
  sku: String
  location: String!
  disabled: Boolean
}

input CreateVariantValueValueInput {
  variant1: String!
  variant2: String
  variant3: String
}

input CreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input DecreaseItemOfCartInput {
  shopCartId: String!
  orderProductId: String!
}

input DeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterCountBill_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterCountBillControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterCountBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [FilterCountBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountBillOperatorsInput
  OR: [FilterCountBillInput!]
  AND: [FilterCountBillInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountBillOperatorsInput {
  controlNumber: FilterCountBillControlNumberOperatorsInput
  _id: FilterCountBill_idOperatorsInput
}

input FilterCountBrand_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountBrandInput {
  slug: String
  name: String
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountBrandOperatorsInput
  OR: [FilterCountBrandInput!]
  AND: [FilterCountBrandInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountBrandOperatorsInput {
  _id: FilterCountBrand_idOperatorsInput
}

input FilterCountCategory_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCategoryOperatorsInput
  OR: [FilterCountCategoryInput!]
  AND: [FilterCountCategoryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCategoryOperatorsInput {
  _id: FilterCountCategory_idOperatorsInput
}

input FilterCountClient_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountClientOperatorsInput
  OR: [FilterCountClientInput!]
  AND: [FilterCountClientInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountClientOperatorsInput {
  _id: FilterCountClient_idOperatorsInput
}

input FilterCountCredit_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [FilterCountCreditPaymentsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCreditOperatorsInput
  OR: [FilterCountCreditInput!]
  AND: [FilterCountCreditInput!]
}

input FilterCountCreditNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCreditNoteOperatorsInput
  OR: [FilterCountCreditNoteInput!]
  AND: [FilterCountCreditNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCreditNoteOperatorsInput {
  _id: FilterCountCreditNote_idOperatorsInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCreditOperatorsInput {
  _id: FilterCountCredit_idOperatorsInput
}

""""""
input FilterCountCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input FilterCountCurrency_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCurrencyOperatorsInput
  OR: [FilterCountCurrencyInput!]
  AND: [FilterCountCurrencyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCurrencyOperatorsInput {
  _id: FilterCountCurrency_idOperatorsInput
}

input FilterCountDeliveryNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterCountDeliveryNoteControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterCountDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [FilterCountDeliveryNoteChargesInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountDeliveryNoteOperatorsInput
  OR: [FilterCountDeliveryNoteInput!]
  AND: [FilterCountDeliveryNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountDeliveryNoteOperatorsInput {
  controlNumber: FilterCountDeliveryNoteControlNumberOperatorsInput
  _id: FilterCountDeliveryNote_idOperatorsInput
}

input FilterCountLocation_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountLocationOperatorsInput
  OR: [FilterCountLocationInput!]
  AND: [FilterCountLocationInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountLocationOperatorsInput {
  _id: FilterCountLocation_idOperatorsInput
}

input FilterCountModel_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountModelInput {
  slug: String
  name: String
  brand: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountModelOperatorsInput
  OR: [FilterCountModelInput!]
  AND: [FilterCountModelInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountModelOperatorsInput {
  _id: FilterCountModel_idOperatorsInput
}

input FilterCountOrder_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountOrderChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input FilterCountOrderInput {
  status: Float
  code: Float
  paid: Boolean
  subtotal: Float
  tax: Float
  extraFees: Float
  discount: Float
  total: Float
  commission: Float
  products: [MongoID]
  client: MongoID
  shipping: MongoID
  phone: String
  seller: MongoID
  charges: [FilterCountOrderChargesInput]
  address: String
  rate: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountOrderOperatorsInput
  OR: [FilterCountOrderInput!]
  AND: [FilterCountOrderInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountOrderOperatorsInput {
  _id: FilterCountOrder_idOperatorsInput
}

input FilterCountOrderProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountOrderProductOperatorsInput
  OR: [FilterCountOrderProductInput!]
  AND: [FilterCountOrderProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountOrderProductOperatorsInput {
  _id: FilterCountOrderProduct_idOperatorsInput
}

input FilterCountProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountProductExtraInfoInput {
  name: String
  value: String
  _id: MongoID
}

""""""
input FilterCountProductInput {
  slug: String
  title: String
  altCode: String
  description: String
  dataSheet: String
  sku: String
  priority: Float
  rating: Float
  points: Float
  reviews: Float
  isService: Boolean
  active: Boolean
  volatileInventory: Boolean
  photos: [String]
  price: Float
  compareAtPrice: Float
  extraInfo: [FilterCountProductExtraInfoInput]
  brand: MongoID
  comments: [MongoID]
  _model: MongoID
  variants: [MongoID]
  variantValues: [MongoID]
  suppliers: [MongoID]
  categories: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountProductOperatorsInput
  OR: [FilterCountProductInput!]
  AND: [FilterCountProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountProductOperatorsInput {
  _id: FilterCountProduct_idOperatorsInput
}

input FilterCountPromoCode_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountPromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountPromoCodeOperatorsInput
  OR: [FilterCountPromoCodeInput!]
  AND: [FilterCountPromoCodeInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountPromoCodeOperatorsInput {
  _id: FilterCountPromoCode_idOperatorsInput
}

input FilterCountSetting_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountSettingBannerInput {
  text: String
  active: Boolean
}

""""""
input FilterCountSettingCarouselImagesInput {
  title: String
  description: String
  url: String
  _id: MongoID
}

""""""
input FilterCountSettingInput {
  carouselImages: [FilterCountSettingCarouselImagesInput]
  promotions: [FilterCountSettingPromotionsInput]
  banner: FilterCountSettingBannerInput
  categories: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountSettingOperatorsInput
  OR: [FilterCountSettingInput!]
  AND: [FilterCountSettingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountSettingOperatorsInput {
  _id: FilterCountSetting_idOperatorsInput
}

""""""
input FilterCountSettingPromotionsInput {
  title: String
  description: String
  url: String
  _id: MongoID
}

input FilterCountShipping_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountShippingOperatorsInput
  OR: [FilterCountShippingInput!]
  AND: [FilterCountShippingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountShippingOperatorsInput {
  _id: FilterCountShipping_idOperatorsInput
}

input FilterCountShopCart_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountShopCartInput {
  client: MongoID
  items: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountShopCartOperatorsInput
  OR: [FilterCountShopCartInput!]
  AND: [FilterCountShopCartInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountShopCartOperatorsInput {
  _id: FilterCountShopCart_idOperatorsInput
}

input FilterCountSupplier_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountSupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountSupplierOperatorsInput
  OR: [FilterCountSupplierInput!]
  AND: [FilterCountSupplierInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountSupplierOperatorsInput {
  _id: FilterCountSupplier_idOperatorsInput
}

input FilterCountUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterCountUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountUserOperatorsInput
  OR: [FilterCountUserInput!]
  AND: [FilterCountUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountUserOperatorsInput {
  email: FilterCountUserEmailOperatorsInput
  _id: FilterCountUser_idOperatorsInput
}

input FilterCountVariant_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountVariantInput {
  title: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountVariantOperatorsInput
  OR: [FilterCountVariantInput!]
  AND: [FilterCountVariantInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountVariantOperatorsInput {
  _id: FilterCountVariant_idOperatorsInput
}

input FilterCountVariantValue_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountVariantValueInput {
  value: FilterCountVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountVariantValueOperatorsInput
  OR: [FilterCountVariantValueInput!]
  AND: [FilterCountVariantValueInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountVariantValueOperatorsInput {
  _id: FilterCountVariantValue_idOperatorsInput
}

""""""
input FilterCountVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input FilterFindManyBill_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterFindManyBillControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindManyBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [FilterFindManyBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyBillOperatorsInput
  OR: [FilterFindManyBillInput!]
  AND: [FilterFindManyBillInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyBillOperatorsInput {
  controlNumber: FilterFindManyBillControlNumberOperatorsInput
  _id: FilterFindManyBill_idOperatorsInput
}

input FilterFindManyBrand_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyBrandInput {
  slug: String
  name: String
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyBrandOperatorsInput
  OR: [FilterFindManyBrandInput!]
  AND: [FilterFindManyBrandInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyBrandOperatorsInput {
  _id: FilterFindManyBrand_idOperatorsInput
}

input FilterFindManyCategory_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCategoryOperatorsInput
  OR: [FilterFindManyCategoryInput!]
  AND: [FilterFindManyCategoryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCategoryOperatorsInput {
  _id: FilterFindManyCategory_idOperatorsInput
}

input FilterFindManyClient_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyClientOperatorsInput
  OR: [FilterFindManyClientInput!]
  AND: [FilterFindManyClientInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyClientOperatorsInput {
  _id: FilterFindManyClient_idOperatorsInput
}

input FilterFindManyCredit_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [FilterFindManyCreditPaymentsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCreditOperatorsInput
  OR: [FilterFindManyCreditInput!]
  AND: [FilterFindManyCreditInput!]
}

input FilterFindManyCreditNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCreditNoteOperatorsInput
  OR: [FilterFindManyCreditNoteInput!]
  AND: [FilterFindManyCreditNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCreditNoteOperatorsInput {
  _id: FilterFindManyCreditNote_idOperatorsInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCreditOperatorsInput {
  _id: FilterFindManyCredit_idOperatorsInput
}

""""""
input FilterFindManyCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input FilterFindManyCurrency_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCurrencyOperatorsInput
  OR: [FilterFindManyCurrencyInput!]
  AND: [FilterFindManyCurrencyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCurrencyOperatorsInput {
  _id: FilterFindManyCurrency_idOperatorsInput
}

input FilterFindManyDeliveryNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterFindManyDeliveryNoteControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindManyDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [FilterFindManyDeliveryNoteChargesInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyDeliveryNoteOperatorsInput
  OR: [FilterFindManyDeliveryNoteInput!]
  AND: [FilterFindManyDeliveryNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyDeliveryNoteOperatorsInput {
  controlNumber: FilterFindManyDeliveryNoteControlNumberOperatorsInput
  _id: FilterFindManyDeliveryNote_idOperatorsInput
}

input FilterFindManyLocation_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyLocationOperatorsInput
  OR: [FilterFindManyLocationInput!]
  AND: [FilterFindManyLocationInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyLocationOperatorsInput {
  _id: FilterFindManyLocation_idOperatorsInput
}

input FilterFindManyModel_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyModelInput {
  slug: String
  name: String
  brand: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyModelOperatorsInput
  OR: [FilterFindManyModelInput!]
  AND: [FilterFindManyModelInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyModelOperatorsInput {
  _id: FilterFindManyModel_idOperatorsInput
}

input FilterFindManyOrder_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyOrderChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input FilterFindManyOrderInput {
  status: Float
  code: Float
  paid: Boolean
  subtotal: Float
  tax: Float
  extraFees: Float
  discount: Float
  total: Float
  commission: Float
  products: [MongoID]
  client: MongoID
  shipping: MongoID
  phone: String
  seller: MongoID
  charges: [FilterFindManyOrderChargesInput]
  address: String
  rate: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyOrderOperatorsInput
  OR: [FilterFindManyOrderInput!]
  AND: [FilterFindManyOrderInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyOrderOperatorsInput {
  _id: FilterFindManyOrder_idOperatorsInput
}

input FilterFindManyOrderProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyOrderProductOperatorsInput
  OR: [FilterFindManyOrderProductInput!]
  AND: [FilterFindManyOrderProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyOrderProductOperatorsInput {
  _id: FilterFindManyOrderProduct_idOperatorsInput
}

input FilterFindManyProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyProductExtraInfoInput {
  name: String
  value: String
  _id: MongoID
}

""""""
input FilterFindManyProductInput {
  slug: String
  title: String
  altCode: String
  description: String
  dataSheet: String
  sku: String
  priority: Float
  rating: Float
  points: Float
  reviews: Float
  isService: Boolean
  active: Boolean
  volatileInventory: Boolean
  photos: [String]
  price: Float
  compareAtPrice: Float
  extraInfo: [FilterFindManyProductExtraInfoInput]
  brand: MongoID
  comments: [MongoID]
  _model: MongoID
  variants: [MongoID]
  variantValues: [MongoID]
  suppliers: [MongoID]
  categories: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyProductOperatorsInput
  OR: [FilterFindManyProductInput!]
  AND: [FilterFindManyProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyProductOperatorsInput {
  _id: FilterFindManyProduct_idOperatorsInput
}

input FilterFindManyPromoCode_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyPromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPromoCodeOperatorsInput
  OR: [FilterFindManyPromoCodeInput!]
  AND: [FilterFindManyPromoCodeInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPromoCodeOperatorsInput {
  _id: FilterFindManyPromoCode_idOperatorsInput
}

input FilterFindManySetting_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManySettingBannerInput {
  text: String
  active: Boolean
}

""""""
input FilterFindManySettingCarouselImagesInput {
  title: String
  description: String
  url: String
  _id: MongoID
}

""""""
input FilterFindManySettingInput {
  carouselImages: [FilterFindManySettingCarouselImagesInput]
  promotions: [FilterFindManySettingPromotionsInput]
  banner: FilterFindManySettingBannerInput
  categories: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySettingOperatorsInput
  OR: [FilterFindManySettingInput!]
  AND: [FilterFindManySettingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySettingOperatorsInput {
  _id: FilterFindManySetting_idOperatorsInput
}

""""""
input FilterFindManySettingPromotionsInput {
  title: String
  description: String
  url: String
  _id: MongoID
}

input FilterFindManyShipping_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyShippingOperatorsInput
  OR: [FilterFindManyShippingInput!]
  AND: [FilterFindManyShippingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyShippingOperatorsInput {
  _id: FilterFindManyShipping_idOperatorsInput
}

input FilterFindManyShopCart_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyShopCartInput {
  client: MongoID
  items: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyShopCartOperatorsInput
  OR: [FilterFindManyShopCartInput!]
  AND: [FilterFindManyShopCartInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyShopCartOperatorsInput {
  _id: FilterFindManyShopCart_idOperatorsInput
}

input FilterFindManySupplier_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManySupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySupplierOperatorsInput
  OR: [FilterFindManySupplierInput!]
  AND: [FilterFindManySupplierInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySupplierOperatorsInput {
  _id: FilterFindManySupplier_idOperatorsInput
}

input FilterFindManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindManyUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyUserOperatorsInput
  OR: [FilterFindManyUserInput!]
  AND: [FilterFindManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyUserOperatorsInput {
  email: FilterFindManyUserEmailOperatorsInput
  _id: FilterFindManyUser_idOperatorsInput
}

input FilterFindManyVariant_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyVariantInput {
  title: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyVariantOperatorsInput
  OR: [FilterFindManyVariantInput!]
  AND: [FilterFindManyVariantInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyVariantOperatorsInput {
  _id: FilterFindManyVariant_idOperatorsInput
}

input FilterFindManyVariantValue_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyVariantValueInput {
  value: FilterFindManyVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyVariantValueOperatorsInput
  OR: [FilterFindManyVariantValueInput!]
  AND: [FilterFindManyVariantValueInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyVariantValueOperatorsInput {
  _id: FilterFindManyVariantValue_idOperatorsInput
}

""""""
input FilterFindManyVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input FilterFindOneBill_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterFindOneBillControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindOneBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [FilterFindOneBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneBillOperatorsInput
  OR: [FilterFindOneBillInput!]
  AND: [FilterFindOneBillInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneBillOperatorsInput {
  controlNumber: FilterFindOneBillControlNumberOperatorsInput
  _id: FilterFindOneBill_idOperatorsInput
}

input FilterFindOneBrand_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneBrandInput {
  slug: String
  name: String
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneBrandOperatorsInput
  OR: [FilterFindOneBrandInput!]
  AND: [FilterFindOneBrandInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneBrandOperatorsInput {
  _id: FilterFindOneBrand_idOperatorsInput
}

input FilterFindOneCategory_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCategoryOperatorsInput
  OR: [FilterFindOneCategoryInput!]
  AND: [FilterFindOneCategoryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCategoryOperatorsInput {
  _id: FilterFindOneCategory_idOperatorsInput
}

input FilterFindOneClient_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneClientOperatorsInput
  OR: [FilterFindOneClientInput!]
  AND: [FilterFindOneClientInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneClientOperatorsInput {
  _id: FilterFindOneClient_idOperatorsInput
}

input FilterFindOneCredit_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [FilterFindOneCreditPaymentsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCreditOperatorsInput
  OR: [FilterFindOneCreditInput!]
  AND: [FilterFindOneCreditInput!]
}

input FilterFindOneCreditNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCreditNoteOperatorsInput
  OR: [FilterFindOneCreditNoteInput!]
  AND: [FilterFindOneCreditNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCreditNoteOperatorsInput {
  _id: FilterFindOneCreditNote_idOperatorsInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCreditOperatorsInput {
  _id: FilterFindOneCredit_idOperatorsInput
}

""""""
input FilterFindOneCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input FilterFindOneCurrency_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCurrencyOperatorsInput
  OR: [FilterFindOneCurrencyInput!]
  AND: [FilterFindOneCurrencyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCurrencyOperatorsInput {
  _id: FilterFindOneCurrency_idOperatorsInput
}

input FilterFindOneDeliveryNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterFindOneDeliveryNoteControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindOneDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [FilterFindOneDeliveryNoteChargesInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneDeliveryNoteOperatorsInput
  OR: [FilterFindOneDeliveryNoteInput!]
  AND: [FilterFindOneDeliveryNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneDeliveryNoteOperatorsInput {
  controlNumber: FilterFindOneDeliveryNoteControlNumberOperatorsInput
  _id: FilterFindOneDeliveryNote_idOperatorsInput
}

input FilterFindOneLocation_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneLocationOperatorsInput
  OR: [FilterFindOneLocationInput!]
  AND: [FilterFindOneLocationInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneLocationOperatorsInput {
  _id: FilterFindOneLocation_idOperatorsInput
}

input FilterFindOneModel_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneModelInput {
  slug: String
  name: String
  brand: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneModelOperatorsInput
  OR: [FilterFindOneModelInput!]
  AND: [FilterFindOneModelInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneModelOperatorsInput {
  _id: FilterFindOneModel_idOperatorsInput
}

input FilterFindOneOrder_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneOrderChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input FilterFindOneOrderInput {
  status: Float
  code: Float
  paid: Boolean
  subtotal: Float
  tax: Float
  extraFees: Float
  discount: Float
  total: Float
  commission: Float
  products: [MongoID]
  client: MongoID
  shipping: MongoID
  phone: String
  seller: MongoID
  charges: [FilterFindOneOrderChargesInput]
  address: String
  rate: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneOrderOperatorsInput
  OR: [FilterFindOneOrderInput!]
  AND: [FilterFindOneOrderInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneOrderOperatorsInput {
  _id: FilterFindOneOrder_idOperatorsInput
}

input FilterFindOneOrderProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneOrderProductOperatorsInput
  OR: [FilterFindOneOrderProductInput!]
  AND: [FilterFindOneOrderProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneOrderProductOperatorsInput {
  _id: FilterFindOneOrderProduct_idOperatorsInput
}

input FilterFindOneProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneProductExtraInfoInput {
  name: String
  value: String
  _id: MongoID
}

""""""
input FilterFindOneProductInput {
  slug: String
  title: String
  altCode: String
  description: String
  dataSheet: String
  sku: String
  priority: Float
  rating: Float
  points: Float
  reviews: Float
  isService: Boolean
  active: Boolean
  volatileInventory: Boolean
  photos: [String]
  price: Float
  compareAtPrice: Float
  extraInfo: [FilterFindOneProductExtraInfoInput]
  brand: MongoID
  comments: [MongoID]
  _model: MongoID
  variants: [MongoID]
  variantValues: [MongoID]
  suppliers: [MongoID]
  categories: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneProductOperatorsInput
  OR: [FilterFindOneProductInput!]
  AND: [FilterFindOneProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneProductOperatorsInput {
  _id: FilterFindOneProduct_idOperatorsInput
}

input FilterFindOnePromoCode_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOnePromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePromoCodeOperatorsInput
  OR: [FilterFindOnePromoCodeInput!]
  AND: [FilterFindOnePromoCodeInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePromoCodeOperatorsInput {
  _id: FilterFindOnePromoCode_idOperatorsInput
}

input FilterFindOneSetting_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneSettingBannerInput {
  text: String
  active: Boolean
}

""""""
input FilterFindOneSettingCarouselImagesInput {
  title: String
  description: String
  url: String
  _id: MongoID
}

""""""
input FilterFindOneSettingInput {
  carouselImages: [FilterFindOneSettingCarouselImagesInput]
  promotions: [FilterFindOneSettingPromotionsInput]
  banner: FilterFindOneSettingBannerInput
  categories: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneSettingOperatorsInput
  OR: [FilterFindOneSettingInput!]
  AND: [FilterFindOneSettingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneSettingOperatorsInput {
  _id: FilterFindOneSetting_idOperatorsInput
}

""""""
input FilterFindOneSettingPromotionsInput {
  title: String
  description: String
  url: String
  _id: MongoID
}

input FilterFindOneShipping_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneShippingOperatorsInput
  OR: [FilterFindOneShippingInput!]
  AND: [FilterFindOneShippingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneShippingOperatorsInput {
  _id: FilterFindOneShipping_idOperatorsInput
}

input FilterFindOneShopCart_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneShopCartInput {
  client: MongoID
  items: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneShopCartOperatorsInput
  OR: [FilterFindOneShopCartInput!]
  AND: [FilterFindOneShopCartInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneShopCartOperatorsInput {
  _id: FilterFindOneShopCart_idOperatorsInput
}

input FilterFindOneSupplier_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneSupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneSupplierOperatorsInput
  OR: [FilterFindOneSupplierInput!]
  AND: [FilterFindOneSupplierInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneSupplierOperatorsInput {
  _id: FilterFindOneSupplier_idOperatorsInput
}

input FilterFindOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindOneUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneUserOperatorsInput
  OR: [FilterFindOneUserInput!]
  AND: [FilterFindOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneUserOperatorsInput {
  email: FilterFindOneUserEmailOperatorsInput
  _id: FilterFindOneUser_idOperatorsInput
}

input FilterFindOneVariant_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneVariantInput {
  title: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneVariantOperatorsInput
  OR: [FilterFindOneVariantInput!]
  AND: [FilterFindOneVariantInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneVariantOperatorsInput {
  _id: FilterFindOneVariant_idOperatorsInput
}

input FilterFindOneVariantValue_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneVariantValueInput {
  value: FilterFindOneVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneVariantValueOperatorsInput
  OR: [FilterFindOneVariantValueInput!]
  AND: [FilterFindOneVariantValueInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneVariantValueOperatorsInput {
  _id: FilterFindOneVariantValue_idOperatorsInput
}

""""""
input FilterFindOneVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input FilterGetProductInput {
  _id: MongoID
  slug: String
  title: String
  description: String
  priority: Float
  rating: Float
  isService: Boolean
  active: Boolean
  brand: MongoID
}

input FilterOneProduct {
  _id: String
}

input FilterProductsByCategoryPriceInput {
  page: Int!
  perPage: Int!
  slugs: [String!]!
  min: Float
  max: Float
}

input FilterProductsByPricePaginationInput {
  page: Int!
  perPage: Int!
  min: Float
  max: Float
}

input FilterRemoveManyBill_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterRemoveManyBillControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterRemoveManyBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [FilterRemoveManyBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyBillOperatorsInput
  OR: [FilterRemoveManyBillInput!]
  AND: [FilterRemoveManyBillInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyBillOperatorsInput {
  controlNumber: FilterRemoveManyBillControlNumberOperatorsInput
  _id: FilterRemoveManyBill_idOperatorsInput
}

input FilterRemoveManyBrand_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyBrandInput {
  slug: String
  name: String
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyBrandOperatorsInput
  OR: [FilterRemoveManyBrandInput!]
  AND: [FilterRemoveManyBrandInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyBrandOperatorsInput {
  _id: FilterRemoveManyBrand_idOperatorsInput
}

input FilterRemoveManyCategory_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyCategoryOperatorsInput
  OR: [FilterRemoveManyCategoryInput!]
  AND: [FilterRemoveManyCategoryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyCategoryOperatorsInput {
  _id: FilterRemoveManyCategory_idOperatorsInput
}

input FilterRemoveManyClient_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyClientOperatorsInput
  OR: [FilterRemoveManyClientInput!]
  AND: [FilterRemoveManyClientInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyClientOperatorsInput {
  _id: FilterRemoveManyClient_idOperatorsInput
}

input FilterRemoveManyCredit_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [FilterRemoveManyCreditPaymentsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyCreditOperatorsInput
  OR: [FilterRemoveManyCreditInput!]
  AND: [FilterRemoveManyCreditInput!]
}

input FilterRemoveManyCreditNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyCreditNoteOperatorsInput
  OR: [FilterRemoveManyCreditNoteInput!]
  AND: [FilterRemoveManyCreditNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyCreditNoteOperatorsInput {
  _id: FilterRemoveManyCreditNote_idOperatorsInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyCreditOperatorsInput {
  _id: FilterRemoveManyCredit_idOperatorsInput
}

""""""
input FilterRemoveManyCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input FilterRemoveManyCurrency_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyCurrencyOperatorsInput
  OR: [FilterRemoveManyCurrencyInput!]
  AND: [FilterRemoveManyCurrencyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyCurrencyOperatorsInput {
  _id: FilterRemoveManyCurrency_idOperatorsInput
}

input FilterRemoveManyDeliveryNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterRemoveManyDeliveryNoteControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterRemoveManyDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [FilterRemoveManyDeliveryNoteChargesInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyDeliveryNoteOperatorsInput
  OR: [FilterRemoveManyDeliveryNoteInput!]
  AND: [FilterRemoveManyDeliveryNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyDeliveryNoteOperatorsInput {
  controlNumber: FilterRemoveManyDeliveryNoteControlNumberOperatorsInput
  _id: FilterRemoveManyDeliveryNote_idOperatorsInput
}

input FilterRemoveManyLocation_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyLocationOperatorsInput
  OR: [FilterRemoveManyLocationInput!]
  AND: [FilterRemoveManyLocationInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyLocationOperatorsInput {
  _id: FilterRemoveManyLocation_idOperatorsInput
}

input FilterRemoveManyModel_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyModelInput {
  slug: String
  name: String
  brand: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyModelOperatorsInput
  OR: [FilterRemoveManyModelInput!]
  AND: [FilterRemoveManyModelInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyModelOperatorsInput {
  _id: FilterRemoveManyModel_idOperatorsInput
}

input FilterRemoveManyOrder_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyOrderChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input FilterRemoveManyOrderInput {
  status: Float
  code: Float
  paid: Boolean
  subtotal: Float
  tax: Float
  extraFees: Float
  discount: Float
  total: Float
  commission: Float
  products: [MongoID]
  client: MongoID
  shipping: MongoID
  phone: String
  seller: MongoID
  charges: [FilterRemoveManyOrderChargesInput]
  address: String
  rate: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyOrderOperatorsInput
  OR: [FilterRemoveManyOrderInput!]
  AND: [FilterRemoveManyOrderInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyOrderOperatorsInput {
  _id: FilterRemoveManyOrder_idOperatorsInput
}

input FilterRemoveManyOrderProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyOrderProductOperatorsInput
  OR: [FilterRemoveManyOrderProductInput!]
  AND: [FilterRemoveManyOrderProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyOrderProductOperatorsInput {
  _id: FilterRemoveManyOrderProduct_idOperatorsInput
}

input FilterRemoveManyProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyProductExtraInfoInput {
  name: String
  value: String
  _id: MongoID
}

""""""
input FilterRemoveManyProductInput {
  slug: String
  title: String
  altCode: String
  description: String
  dataSheet: String
  sku: String
  priority: Float
  rating: Float
  points: Float
  reviews: Float
  isService: Boolean
  active: Boolean
  volatileInventory: Boolean
  photos: [String]
  price: Float
  compareAtPrice: Float
  extraInfo: [FilterRemoveManyProductExtraInfoInput]
  brand: MongoID
  comments: [MongoID]
  _model: MongoID
  variants: [MongoID]
  variantValues: [MongoID]
  suppliers: [MongoID]
  categories: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyProductOperatorsInput
  OR: [FilterRemoveManyProductInput!]
  AND: [FilterRemoveManyProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyProductOperatorsInput {
  _id: FilterRemoveManyProduct_idOperatorsInput
}

input FilterRemoveManyPromoCode_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyPromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyPromoCodeOperatorsInput
  OR: [FilterRemoveManyPromoCodeInput!]
  AND: [FilterRemoveManyPromoCodeInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyPromoCodeOperatorsInput {
  _id: FilterRemoveManyPromoCode_idOperatorsInput
}

input FilterRemoveManyShipping_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyShippingOperatorsInput
  OR: [FilterRemoveManyShippingInput!]
  AND: [FilterRemoveManyShippingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyShippingOperatorsInput {
  _id: FilterRemoveManyShipping_idOperatorsInput
}

input FilterRemoveManyShopCart_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyShopCartInput {
  client: MongoID
  items: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyShopCartOperatorsInput
  OR: [FilterRemoveManyShopCartInput!]
  AND: [FilterRemoveManyShopCartInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyShopCartOperatorsInput {
  _id: FilterRemoveManyShopCart_idOperatorsInput
}

input FilterRemoveManySupplier_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManySupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManySupplierOperatorsInput
  OR: [FilterRemoveManySupplierInput!]
  AND: [FilterRemoveManySupplierInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManySupplierOperatorsInput {
  _id: FilterRemoveManySupplier_idOperatorsInput
}

input FilterRemoveManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterRemoveManyUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyUserOperatorsInput
  OR: [FilterRemoveManyUserInput!]
  AND: [FilterRemoveManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyUserOperatorsInput {
  email: FilterRemoveManyUserEmailOperatorsInput
  _id: FilterRemoveManyUser_idOperatorsInput
}

input FilterRemoveManyVariant_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyVariantInput {
  title: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyVariantOperatorsInput
  OR: [FilterRemoveManyVariantInput!]
  AND: [FilterRemoveManyVariantInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyVariantOperatorsInput {
  _id: FilterRemoveManyVariant_idOperatorsInput
}

input FilterRemoveManyVariantValue_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyVariantValueInput {
  value: FilterRemoveManyVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyVariantValueOperatorsInput
  OR: [FilterRemoveManyVariantValueInput!]
  AND: [FilterRemoveManyVariantValueInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyVariantValueOperatorsInput {
  _id: FilterRemoveManyVariantValue_idOperatorsInput
}

""""""
input FilterRemoveManyVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input FilterRemoveOneBill_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterRemoveOneBillControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterRemoveOneBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [FilterRemoveOneBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneBillOperatorsInput
  OR: [FilterRemoveOneBillInput!]
  AND: [FilterRemoveOneBillInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneBillOperatorsInput {
  controlNumber: FilterRemoveOneBillControlNumberOperatorsInput
  _id: FilterRemoveOneBill_idOperatorsInput
}

input FilterRemoveOneBrand_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneBrandInput {
  slug: String
  name: String
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneBrandOperatorsInput
  OR: [FilterRemoveOneBrandInput!]
  AND: [FilterRemoveOneBrandInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneBrandOperatorsInput {
  _id: FilterRemoveOneBrand_idOperatorsInput
}

input FilterRemoveOneCategory_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCategoryOperatorsInput
  OR: [FilterRemoveOneCategoryInput!]
  AND: [FilterRemoveOneCategoryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCategoryOperatorsInput {
  _id: FilterRemoveOneCategory_idOperatorsInput
}

input FilterRemoveOneClient_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneClientOperatorsInput
  OR: [FilterRemoveOneClientInput!]
  AND: [FilterRemoveOneClientInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneClientOperatorsInput {
  _id: FilterRemoveOneClient_idOperatorsInput
}

input FilterRemoveOneCredit_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [FilterRemoveOneCreditPaymentsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCreditOperatorsInput
  OR: [FilterRemoveOneCreditInput!]
  AND: [FilterRemoveOneCreditInput!]
}

input FilterRemoveOneCreditNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCreditNoteOperatorsInput
  OR: [FilterRemoveOneCreditNoteInput!]
  AND: [FilterRemoveOneCreditNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCreditNoteOperatorsInput {
  _id: FilterRemoveOneCreditNote_idOperatorsInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCreditOperatorsInput {
  _id: FilterRemoveOneCredit_idOperatorsInput
}

""""""
input FilterRemoveOneCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input FilterRemoveOneCurrency_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCurrencyOperatorsInput
  OR: [FilterRemoveOneCurrencyInput!]
  AND: [FilterRemoveOneCurrencyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCurrencyOperatorsInput {
  _id: FilterRemoveOneCurrency_idOperatorsInput
}

input FilterRemoveOneDeliveryNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterRemoveOneDeliveryNoteControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterRemoveOneDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [FilterRemoveOneDeliveryNoteChargesInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneDeliveryNoteOperatorsInput
  OR: [FilterRemoveOneDeliveryNoteInput!]
  AND: [FilterRemoveOneDeliveryNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneDeliveryNoteOperatorsInput {
  controlNumber: FilterRemoveOneDeliveryNoteControlNumberOperatorsInput
  _id: FilterRemoveOneDeliveryNote_idOperatorsInput
}

input FilterRemoveOneLocation_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneLocationOperatorsInput
  OR: [FilterRemoveOneLocationInput!]
  AND: [FilterRemoveOneLocationInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneLocationOperatorsInput {
  _id: FilterRemoveOneLocation_idOperatorsInput
}

input FilterRemoveOneModel_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneModelInput {
  slug: String
  name: String
  brand: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneModelOperatorsInput
  OR: [FilterRemoveOneModelInput!]
  AND: [FilterRemoveOneModelInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneModelOperatorsInput {
  _id: FilterRemoveOneModel_idOperatorsInput
}

input FilterRemoveOneOrder_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneOrderChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input FilterRemoveOneOrderInput {
  status: Float
  code: Float
  paid: Boolean
  subtotal: Float
  tax: Float
  extraFees: Float
  discount: Float
  total: Float
  commission: Float
  products: [MongoID]
  client: MongoID
  shipping: MongoID
  phone: String
  seller: MongoID
  charges: [FilterRemoveOneOrderChargesInput]
  address: String
  rate: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneOrderOperatorsInput
  OR: [FilterRemoveOneOrderInput!]
  AND: [FilterRemoveOneOrderInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneOrderOperatorsInput {
  _id: FilterRemoveOneOrder_idOperatorsInput
}

input FilterRemoveOneOrderProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneOrderProductOperatorsInput
  OR: [FilterRemoveOneOrderProductInput!]
  AND: [FilterRemoveOneOrderProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneOrderProductOperatorsInput {
  _id: FilterRemoveOneOrderProduct_idOperatorsInput
}

input FilterRemoveOneProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneProductExtraInfoInput {
  name: String
  value: String
  _id: MongoID
}

""""""
input FilterRemoveOneProductInput {
  slug: String
  title: String
  altCode: String
  description: String
  dataSheet: String
  sku: String
  priority: Float
  rating: Float
  points: Float
  reviews: Float
  isService: Boolean
  active: Boolean
  volatileInventory: Boolean
  photos: [String]
  price: Float
  compareAtPrice: Float
  extraInfo: [FilterRemoveOneProductExtraInfoInput]
  brand: MongoID
  comments: [MongoID]
  _model: MongoID
  variants: [MongoID]
  variantValues: [MongoID]
  suppliers: [MongoID]
  categories: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneProductOperatorsInput
  OR: [FilterRemoveOneProductInput!]
  AND: [FilterRemoveOneProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneProductOperatorsInput {
  _id: FilterRemoveOneProduct_idOperatorsInput
}

input FilterRemoveOnePromoCode_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOnePromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOnePromoCodeOperatorsInput
  OR: [FilterRemoveOnePromoCodeInput!]
  AND: [FilterRemoveOnePromoCodeInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOnePromoCodeOperatorsInput {
  _id: FilterRemoveOnePromoCode_idOperatorsInput
}

input FilterRemoveOneShipping_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneShippingOperatorsInput
  OR: [FilterRemoveOneShippingInput!]
  AND: [FilterRemoveOneShippingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneShippingOperatorsInput {
  _id: FilterRemoveOneShipping_idOperatorsInput
}

input FilterRemoveOneShopCart_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneShopCartInput {
  client: MongoID
  items: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneShopCartOperatorsInput
  OR: [FilterRemoveOneShopCartInput!]
  AND: [FilterRemoveOneShopCartInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneShopCartOperatorsInput {
  _id: FilterRemoveOneShopCart_idOperatorsInput
}

input FilterRemoveOneSupplier_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneSupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneSupplierOperatorsInput
  OR: [FilterRemoveOneSupplierInput!]
  AND: [FilterRemoveOneSupplierInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneSupplierOperatorsInput {
  _id: FilterRemoveOneSupplier_idOperatorsInput
}

input FilterRemoveOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterRemoveOneUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneUserOperatorsInput
  OR: [FilterRemoveOneUserInput!]
  AND: [FilterRemoveOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneUserOperatorsInput {
  email: FilterRemoveOneUserEmailOperatorsInput
  _id: FilterRemoveOneUser_idOperatorsInput
}

input FilterRemoveOneVariant_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneVariantInput {
  title: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneVariantOperatorsInput
  OR: [FilterRemoveOneVariantInput!]
  AND: [FilterRemoveOneVariantInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneVariantOperatorsInput {
  _id: FilterRemoveOneVariant_idOperatorsInput
}

input FilterRemoveOneVariantValue_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneVariantValueInput {
  value: FilterRemoveOneVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneVariantValueOperatorsInput
  OR: [FilterRemoveOneVariantValueInput!]
  AND: [FilterRemoveOneVariantValueInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneVariantValueOperatorsInput {
  _id: FilterRemoveOneVariantValue_idOperatorsInput
}

""""""
input FilterRemoveOneVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input FilterUpdateManyBill_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterUpdateManyBillControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterUpdateManyBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [FilterUpdateManyBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyBillOperatorsInput
  OR: [FilterUpdateManyBillInput!]
  AND: [FilterUpdateManyBillInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyBillOperatorsInput {
  controlNumber: FilterUpdateManyBillControlNumberOperatorsInput
  _id: FilterUpdateManyBill_idOperatorsInput
}

input FilterUpdateManyBrand_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyBrandInput {
  slug: String
  name: String
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyBrandOperatorsInput
  OR: [FilterUpdateManyBrandInput!]
  AND: [FilterUpdateManyBrandInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyBrandOperatorsInput {
  _id: FilterUpdateManyBrand_idOperatorsInput
}

input FilterUpdateManyCategory_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyCategoryOperatorsInput
  OR: [FilterUpdateManyCategoryInput!]
  AND: [FilterUpdateManyCategoryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyCategoryOperatorsInput {
  _id: FilterUpdateManyCategory_idOperatorsInput
}

input FilterUpdateManyClient_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyClientOperatorsInput
  OR: [FilterUpdateManyClientInput!]
  AND: [FilterUpdateManyClientInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyClientOperatorsInput {
  _id: FilterUpdateManyClient_idOperatorsInput
}

input FilterUpdateManyCredit_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [FilterUpdateManyCreditPaymentsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyCreditOperatorsInput
  OR: [FilterUpdateManyCreditInput!]
  AND: [FilterUpdateManyCreditInput!]
}

input FilterUpdateManyCreditNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyCreditNoteOperatorsInput
  OR: [FilterUpdateManyCreditNoteInput!]
  AND: [FilterUpdateManyCreditNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyCreditNoteOperatorsInput {
  _id: FilterUpdateManyCreditNote_idOperatorsInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyCreditOperatorsInput {
  _id: FilterUpdateManyCredit_idOperatorsInput
}

""""""
input FilterUpdateManyCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input FilterUpdateManyCurrency_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyCurrencyOperatorsInput
  OR: [FilterUpdateManyCurrencyInput!]
  AND: [FilterUpdateManyCurrencyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyCurrencyOperatorsInput {
  _id: FilterUpdateManyCurrency_idOperatorsInput
}

input FilterUpdateManyDeliveryNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterUpdateManyDeliveryNoteControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterUpdateManyDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [FilterUpdateManyDeliveryNoteChargesInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyDeliveryNoteOperatorsInput
  OR: [FilterUpdateManyDeliveryNoteInput!]
  AND: [FilterUpdateManyDeliveryNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyDeliveryNoteOperatorsInput {
  controlNumber: FilterUpdateManyDeliveryNoteControlNumberOperatorsInput
  _id: FilterUpdateManyDeliveryNote_idOperatorsInput
}

input FilterUpdateManyLocation_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyLocationOperatorsInput
  OR: [FilterUpdateManyLocationInput!]
  AND: [FilterUpdateManyLocationInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyLocationOperatorsInput {
  _id: FilterUpdateManyLocation_idOperatorsInput
}

input FilterUpdateManyModel_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyModelInput {
  slug: String
  name: String
  brand: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyModelOperatorsInput
  OR: [FilterUpdateManyModelInput!]
  AND: [FilterUpdateManyModelInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyModelOperatorsInput {
  _id: FilterUpdateManyModel_idOperatorsInput
}

input FilterUpdateManyOrderProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyOrderProductOperatorsInput
  OR: [FilterUpdateManyOrderProductInput!]
  AND: [FilterUpdateManyOrderProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyOrderProductOperatorsInput {
  _id: FilterUpdateManyOrderProduct_idOperatorsInput
}

input FilterUpdateManyPromoCode_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyPromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyPromoCodeOperatorsInput
  OR: [FilterUpdateManyPromoCodeInput!]
  AND: [FilterUpdateManyPromoCodeInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyPromoCodeOperatorsInput {
  _id: FilterUpdateManyPromoCode_idOperatorsInput
}

input FilterUpdateManyShipping_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyShippingOperatorsInput
  OR: [FilterUpdateManyShippingInput!]
  AND: [FilterUpdateManyShippingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyShippingOperatorsInput {
  _id: FilterUpdateManyShipping_idOperatorsInput
}

input FilterUpdateManyShopCart_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyShopCartInput {
  client: MongoID
  items: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyShopCartOperatorsInput
  OR: [FilterUpdateManyShopCartInput!]
  AND: [FilterUpdateManyShopCartInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyShopCartOperatorsInput {
  _id: FilterUpdateManyShopCart_idOperatorsInput
}

input FilterUpdateManySupplier_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManySupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManySupplierOperatorsInput
  OR: [FilterUpdateManySupplierInput!]
  AND: [FilterUpdateManySupplierInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManySupplierOperatorsInput {
  _id: FilterUpdateManySupplier_idOperatorsInput
}

input FilterUpdateManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterUpdateManyUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyUserOperatorsInput
  OR: [FilterUpdateManyUserInput!]
  AND: [FilterUpdateManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyUserOperatorsInput {
  email: FilterUpdateManyUserEmailOperatorsInput
  _id: FilterUpdateManyUser_idOperatorsInput
}

input FilterUpdateManyVariant_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyVariantInput {
  title: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyVariantOperatorsInput
  OR: [FilterUpdateManyVariantInput!]
  AND: [FilterUpdateManyVariantInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyVariantOperatorsInput {
  _id: FilterUpdateManyVariant_idOperatorsInput
}

input FilterUpdateManyVariantValue_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyVariantValueInput {
  value: FilterUpdateManyVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyVariantValueOperatorsInput
  OR: [FilterUpdateManyVariantValueInput!]
  AND: [FilterUpdateManyVariantValueInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyVariantValueOperatorsInput {
  _id: FilterUpdateManyVariantValue_idOperatorsInput
}

""""""
input FilterUpdateManyVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input FilterUpdateOneBill_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterUpdateOneBillControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterUpdateOneBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [FilterUpdateOneBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneBillOperatorsInput
  OR: [FilterUpdateOneBillInput!]
  AND: [FilterUpdateOneBillInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneBillOperatorsInput {
  controlNumber: FilterUpdateOneBillControlNumberOperatorsInput
  _id: FilterUpdateOneBill_idOperatorsInput
}

input FilterUpdateOneBrand_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneBrandInput {
  slug: String
  name: String
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneBrandOperatorsInput
  OR: [FilterUpdateOneBrandInput!]
  AND: [FilterUpdateOneBrandInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneBrandOperatorsInput {
  _id: FilterUpdateOneBrand_idOperatorsInput
}

input FilterUpdateOneCategory_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCategoryOperatorsInput
  OR: [FilterUpdateOneCategoryInput!]
  AND: [FilterUpdateOneCategoryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCategoryOperatorsInput {
  _id: FilterUpdateOneCategory_idOperatorsInput
}

input FilterUpdateOneClient_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneClientOperatorsInput
  OR: [FilterUpdateOneClientInput!]
  AND: [FilterUpdateOneClientInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneClientOperatorsInput {
  _id: FilterUpdateOneClient_idOperatorsInput
}

input FilterUpdateOneCredit_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [FilterUpdateOneCreditPaymentsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCreditOperatorsInput
  OR: [FilterUpdateOneCreditInput!]
  AND: [FilterUpdateOneCreditInput!]
}

input FilterUpdateOneCreditNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCreditNoteOperatorsInput
  OR: [FilterUpdateOneCreditNoteInput!]
  AND: [FilterUpdateOneCreditNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCreditNoteOperatorsInput {
  _id: FilterUpdateOneCreditNote_idOperatorsInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCreditOperatorsInput {
  _id: FilterUpdateOneCredit_idOperatorsInput
}

""""""
input FilterUpdateOneCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

input FilterUpdateOneCurrency_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCurrencyOperatorsInput
  OR: [FilterUpdateOneCurrencyInput!]
  AND: [FilterUpdateOneCurrencyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCurrencyOperatorsInput {
  _id: FilterUpdateOneCurrency_idOperatorsInput
}

input FilterUpdateOneDeliveryNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

input FilterUpdateOneDeliveryNoteControlNumberOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterUpdateOneDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [FilterUpdateOneDeliveryNoteChargesInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneDeliveryNoteOperatorsInput
  OR: [FilterUpdateOneDeliveryNoteInput!]
  AND: [FilterUpdateOneDeliveryNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneDeliveryNoteOperatorsInput {
  controlNumber: FilterUpdateOneDeliveryNoteControlNumberOperatorsInput
  _id: FilterUpdateOneDeliveryNote_idOperatorsInput
}

input FilterUpdateOneLocation_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneLocationOperatorsInput
  OR: [FilterUpdateOneLocationInput!]
  AND: [FilterUpdateOneLocationInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneLocationOperatorsInput {
  _id: FilterUpdateOneLocation_idOperatorsInput
}

input FilterUpdateOneModel_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneModelInput {
  slug: String
  name: String
  brand: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneModelOperatorsInput
  OR: [FilterUpdateOneModelInput!]
  AND: [FilterUpdateOneModelInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneModelOperatorsInput {
  _id: FilterUpdateOneModel_idOperatorsInput
}

input FilterUpdateOneOrderProduct_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneOrderProductOperatorsInput
  OR: [FilterUpdateOneOrderProductInput!]
  AND: [FilterUpdateOneOrderProductInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneOrderProductOperatorsInput {
  _id: FilterUpdateOneOrderProduct_idOperatorsInput
}

input FilterUpdateOnePromoCode_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOnePromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOnePromoCodeOperatorsInput
  OR: [FilterUpdateOnePromoCodeInput!]
  AND: [FilterUpdateOnePromoCodeInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOnePromoCodeOperatorsInput {
  _id: FilterUpdateOnePromoCode_idOperatorsInput
}

input FilterUpdateOneShipping_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneShippingOperatorsInput
  OR: [FilterUpdateOneShippingInput!]
  AND: [FilterUpdateOneShippingInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneShippingOperatorsInput {
  _id: FilterUpdateOneShipping_idOperatorsInput
}

input FilterUpdateOneShopCart_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneShopCartInput {
  client: MongoID
  items: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneShopCartOperatorsInput
  OR: [FilterUpdateOneShopCartInput!]
  AND: [FilterUpdateOneShopCartInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneShopCartOperatorsInput {
  _id: FilterUpdateOneShopCart_idOperatorsInput
}

input FilterUpdateOneSupplier_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneSupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneSupplierOperatorsInput
  OR: [FilterUpdateOneSupplierInput!]
  AND: [FilterUpdateOneSupplierInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneSupplierOperatorsInput {
  _id: FilterUpdateOneSupplier_idOperatorsInput
}

input FilterUpdateOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterUpdateOneUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneUserOperatorsInput
  OR: [FilterUpdateOneUserInput!]
  AND: [FilterUpdateOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneUserOperatorsInput {
  email: FilterUpdateOneUserEmailOperatorsInput
  _id: FilterUpdateOneUser_idOperatorsInput
}

input FilterUpdateOneVariant_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneVariantInput {
  title: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneVariantOperatorsInput
  OR: [FilterUpdateOneVariantInput!]
  AND: [FilterUpdateOneVariantInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneVariantOperatorsInput {
  _id: FilterUpdateOneVariant_idOperatorsInput
}

input FilterUpdateOneVariantValue_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneVariantValueInput {
  value: FilterUpdateOneVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneVariantValueOperatorsInput
  OR: [FilterUpdateOneVariantValueInput!]
  AND: [FilterUpdateOneVariantValueInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneVariantValueOperatorsInput {
  _id: FilterUpdateOneVariantValue_idOperatorsInput
}

""""""
input FilterUpdateOneVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input IncreaseItemOfCartInput {
  shopCartId: String!
  orderProductId: String!
}

input ProductByBrandsCategoriesPaginationInput {
  page: Int!
  perPage: Int!
  categories: [String!]!
  brands: [String!]!
}

input ProductPaginationByCategoriesInput {
  page: Int!
  perPage: Int!
  categories: [String!]!
}

input RemoveItemFromCartInput {
  shopCartId: String!
  orderProductId: String!
}

input ResetPasswordInput {
  email: String!
}

input SearchCategoriesByCategoryInput {
  slug: String!
}

input SearchProductByCategoriesInput {
  slugs: [String!]!
}

input SearchProductByCategoriesPaginationInput {
  page: Int!
  perPage: Int!
  slugs: [String!]!
}

input SearchProductPaginationInput {
  page: Int!
  perPage: Int!
  text: String!
}

input UpdateBannerInput {
  text: String!
  active: Boolean!
}

""""""
input UpdateByIdBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateByIdBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [UpdateByIdBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdBrandInput {
  slug: String
  name: String
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [UpdateByIdCreditPaymentsInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateByIdCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateByIdDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [UpdateByIdDeliveryNoteChargesInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdModelInput {
  slug: String
  name: String
  brand: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdPromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdShopCartInput {
  client: MongoID
  items: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdSupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdVariantInput {
  title: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdVariantValueInput {
  value: UpdateByIdVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input UpdateCarouselImageInput {
  title: String
  description: String
  url: String!
}

input UpdateExtraInfoInput {
  name: String!
  value: String!
}

""""""
input UpdateManyBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateManyBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [UpdateManyBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyBrandInput {
  slug: String
  name: String
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [UpdateManyCreditPaymentsInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateManyCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateManyDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [UpdateManyDeliveryNoteChargesInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyModelInput {
  slug: String
  name: String
  brand: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyPromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyShopCartInput {
  client: MongoID
  items: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManySupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyVariantInput {
  title: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyVariantValueInput {
  value: UpdateManyVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

""""""
input UpdateOneBillChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateOneBillInput {
  controlNumber: String
  order: MongoID
  currency: MongoID
  rate: Float
  paid: Boolean
  paymentMetadata: JSON
  charges: [UpdateOneBillChargesInput]
  subtotal: Float
  tax: Float
  discount: Float
  total: Float
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneBrandInput {
  slug: String
  name: String
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneCategoryInput {
  slug: String
  name: String
  photo: String
  products: [MongoID]
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneClientInput {
  address: [MongoID]
  phone: String
  points: Float
  user: MongoID
  shopCart: MongoID
  orders: [MongoID]
  bills: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneCreditInput {
  duration: Date
  total: Float
  interestRate: Float
  status: Float
  order: MongoID
  issuer: MongoID
  client: MongoID
  payments: [UpdateOneCreditPaymentsInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneCreditNoteInput {
  total: Float
  bill: MongoID
  issuer: MongoID
  client: MongoID
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneCreditPaymentsInput {
  amount: Float
  method: String
  ref: String
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateOneCurrencyInput {
  slug: String
  name: String
  symbol: String
  rate: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneDeliveryNoteChargesInput {
  ref: String
  bank: String
  method: String
  amount: Float
  createdAt: Date
  _id: MongoID
}

""""""
input UpdateOneDeliveryNoteInput {
  controlNumber: String
  order: MongoID
  bill: MongoID
  paid: Boolean
  paymentMetadata: JSON
  generateBill: Boolean
  charges: [UpdateOneDeliveryNoteChargesInput]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneLocationInput {
  slug: String
  name: String
  address: String
  shippingOptions: [MongoID]
  lat: Float
  lon: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneModelInput {
  slug: String
  name: String
  brand: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneOrderProductInput {
  quantity: Float
  price: Float
  title: String
  isService: Boolean
  active: Boolean
  photo: String
  brand: String
  model: String
  variant1: String
  variant2: String
  variant3: String
  sku: String
  product: MongoID
  variantValue: MongoID
  location: MongoID
  shopCart: MongoID
  order: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOnePromoCodeInput {
  slug: String
  name: String
  code: String
  discount: Float
  active: Boolean
  fixed: Boolean
  percentage: Boolean
  expirationDate: Date
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneShippingInput {
  slug: String
  name: String
  price: Float
  active: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneShopCartInput {
  client: MongoID
  items: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneSupplierInput {
  slug: String
  name: String
  active: Boolean
  products: [MongoID]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneUserInput {
  name: String
  email: String
  password: String
  dni: String
  dniType: String
  slug: String
  active: Boolean
  resetToken: String
  resetTokenExpiry: Float
  privilege: Float
  commission: Float
  client: MongoID
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneVariantInput {
  title: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneVariantValueInput {
  value: UpdateOneVariantValueValueInput
  price: Float
  compareAtPrice: Float
  quantity: Float
  photo: String
  sku: String
  product: MongoID
  location: MongoID
  disabled: Boolean
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneVariantValueValueInput {
  variant1: String
  variant2: String
  variant3: String
}

input UpdateOrderInput {
  orderId: String!
  status: Int!
  paid: Boolean
  createBill: Boolean!
}

input UpdateProductInput {
  title: String
  description: String
  dataSheet: String
  priority: Int
  isService: Boolean
  volatileInventory: Boolean
  photos: [String]
  brand: String
  variants: CreateOrUpdateVariantInput
  variantValues: CreateOrUpdateVariantValueInput
  categories: [String]
  sku: String
  price: Int
  compareAtPrice: Int
  extraInfo: [UpdateExtraInfoInput]
  model: String
  supplier: String
  active: Boolean
}

input UpdatePromotionsInput {
  title: String
  description: String
  url: String!
}

input UpdateSettingInput {
  _id: MongoID
  carouselImages: [UpdateCarouselImageInput!]
  promotions: [UpdatePromotionsInput!]
  banner: UpdateBannerInput
  categories: [MongoID!]
  active: Boolean
}

input UpdateVariantInput {
  _id: String
  title: String
  tags: [String]
}

input UpdateVariantValueInput {
  _id: String!
  value: UpdateVariantValueValueInput!
  price: Int!
  compareAtPrice: Int
  quantity: Int!
  photo: String
  sku: String
  location: String!
  disabled: Boolean
}

input UpdateVariantValueValueInput {
  variant1: String!
  variant2: String
  variant3: String
}

input UploadManyProductsInput {
  url: String!
}

input VariantValueValueInput {
  variant1: String!
  variant2: String
  variant3: String
}